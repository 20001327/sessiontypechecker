// Generated from spec/ErlangParser.parser
/* This code is inlined before the generated parser */
	package miniErlang; 
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "ErlangParser.beaver".
 */
public class ErlangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short COMMA = 1;
		static public final short LCURLYBRACE = 2;
		static public final short RBRACKET = 3;
		static public final short RCURLYBRACE = 4;
		static public final short INTEGER = 5;
		static public final short LBRACKET = 6;
		static public final short PID = 7;
		static public final short IDENTIFIER = 8;
		static public final short OPENANGULAR = 9;
		static public final short CLOSEANGULAR = 10;
		static public final short ATOM = 11;
		static public final short STRINGTYPE = 12;
		static public final short INTTYPE = 13;
		static public final short ATOMTYPE = 14;
		static public final short INTERNALCHOICE = 15;
		static public final short EXTERNALCHOICE = 16;
		static public final short END = 17;
		static public final short DOT = 18;
		static public final short CLAUSE = 19;
		static public final short VAR = 20;
		static public final short CALL = 21;
		static public final short ATOMID = 22;
		static public final short FUNCTION = 23;
		static public final short INT = 24;
		static public final short STRING = 25;
		static public final short ATTRIBUTE = 26;
		static public final short REGISTER = 27;
		static public final short SINGLEMARKS = 28;
		static public final short TUPLE = 29;
		static public final short OPERATOR = 30;
		static public final short SYMBOL = 31;
		static public final short DIVISION = 32;
		static public final short LESS = 33;
		static public final short SESSIONSEND = 34;
		static public final short SESSIONRECEIVE = 35;
		static public final short LQUAD = 36;
		static public final short RQUAD = 37;
		static public final short MODULE = 38;
		static public final short START = 39;
		static public final short SPAWN = 40;
		static public final short NULL = 41;
		static public final short TYPE = 42;
		static public final short INTEGER_ = 43;
		static public final short SELF = 44;
		static public final short UNREGISTER = 45;
		static public final short SEND = 46;
		static public final short CASE = 47;
		static public final short RECEIVE = 48;
		static public final short MATCH = 49;
		static public final short STRINGVALUE = 50;
		static public final short TRUE = 51;
		static public final short FALSE = 52;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjcGTq5TKMXlyzPz88lNTHgb94IkWreVVUROYAYbYHOW451HjMHCM6H7g784sgI6$IEz9" +
		"x5IdwvlrdvjoRc#JU17pwtbgkTsTziy$PPvywP$wPIG2x7hx6L$W2N#8RZCQt68CH#0oVOn" +
		"G#bY$aI$bAFi9tQSPCm4Tfnip6fobYbden9cAUuq1XIUYMS1IdSH4$IEiqUriaRTECMIxFf" +
		"1cpLfuB6VDQo99FqfZf9eHX7wQ7Yi814xSB6x4bPDHGPu8CTBx3TiHZTwYnI8sG9SrIRNc5" +
		"$2Gh4I#TGzRl5RBabP0bbrEKp3Pz9lSV3#4$6S9$DeJ$V0Z$vH3#Ao7y8SOfBoRw9Ix0RwV" +
		"mfCSSztfTnR#ajjdBmwI2B9O4cIyFUoikNyj4#H7lo1x9AtdmkBIN$DB7Yq5OO8pnsK5yau" +
		"FumeFu8eBueeBueeFu8fECLy#rRfBPVwXt4NTvEZp6$TdJdVqIMQLdZv4iEue3#8LnyTB6t" +
		"M$Fkl7nZ4lFytLtbGRBM9aXUv3WZ9Dho02B9R7E68cKTCvejZeDZqfMl8YCRjq4nWzYH5UM" +
		"wFmiPC8CvhrnUlkv5uRA6Hc211xnaaF7yvY5zSvOUcQnzwswX9vzs4ERu3$Y$KS2xyzsRES" +
		"Ejj1IolDSJ#h8xSwt4ekXB5qXptkHSg$ibgUacyIoV8mymb9TUwYyYdZ7YzWgKsMRR95rib" +
		"b6onPabit8AkEHJMR91iPdb$Mo0raOkLqc8mToohV8XTp8Wxp8X$meY08eXjjGIARWTXJ67" +
		"IY24YYBeYYEkt0dIg8qIk5kbC4zA8UAg83oY45bL48rr4HLL45rr4Ojr44iwc4uub033L0N" +
		"3T48ZT4KpV4#cg4#cg0bMg4jMg0rEgCzEg0Dsg4ZEg4hkk4HF8rxSH#UmFruWES7qHrzy11" +
		"wu4bqmSDu2i#WDvx5S#YB8NWU$J4L$V0I1k05l8nNC0W3yIe6utMyYJVmDjx2kyuPoOxtdF" +
		"4OY$6OZm#S8yvXvpGcOYR6OOBamnHCOiJtMEYSmpmim5miay9OX1#n63zXELPXDTPY0zPW7" +
		"JPZ9JRXPsp33kp4Nkp28Up7GHp1CHp62Pp1APp39Lp0hxY6tt13oiB1TIc7t$67Y42KX4c4" +
		"X4j6iIHAeYM3P98iKaXoIZRdBFTHRiaikPmrpcef80NbDgaeHNWKan9odnINedANb98xfOo" +
		"KbknoZzpDSqUf92KbHYfBLQaYrQIcz9VgKalgImDfA8saYJIMfj9SEaWBQUMSSavA9#aYtU" +
		"L#7W$8W$AGF2ezfASy9e$Ba$AQF26zvMddX7DSNf1#qbS6oW1vMLwIrvrZJ0#LDoLUtf3qy" +
		"fQy8zFaNNbRXibxyhuCbmzaX7medyX8#Km#bL7okVER$0p#v3llBEFaOvdEOoPpS#HxdXVA" +
		"0jdBk$CRMIhxPQwibWCoINwGPR963if6#KLsoY7UkuVbY1oLOx9FZii9EIcdvBISaxDoNYx" +
		"8HVcLBLsIA$8RxLNkpXZkoyhSarMvEwjp9zRapgpDlLcNkpEE#xF#tnxZY#20U1#4Rebt7E" +
		"#tZl#54TrSpAsN#5eDHsGgCytfZykNIfJ5zpPDQKIakcgtNg9RJK$bp$YNjnowv9$cZqxXo" +
		"SudYLvP$HnfQlPoGUfx9ABul6vgLZmJClF9KuRF0bs$2PyYPVaKyMB2ayHuliP1VAs3#AmW" +
		"lhn1V651VCM2#2I9B#NinPrh9Arm5obtzhgUdhrNbfEpZsQPb$FE4OpJyOtTk1W#MGjp9NH" +
		"94xRLZYKwNPvFr2vkpVRCDO9jxeKOFYaZk4eHfaLnM$J6wPrpiQGHvstnY63lEbwt4#RM5$" +
		"Qkt19XRyfjntT4#0#B8s$kHaUulNZd3cvDVPJaipl2j1jBRritLapBbh#cZeXZEeftUnHj9" +
		"relCYl7azMzPi8tW7GSTGHjPxvT2DynmdWEPrasDpQCgN2sLjJj8TprvQFDOSh4lHPXN2ET" +
		"ian4c7ksEKlB7oUyYc6iPxirmesl3NqbwB7TNAGPVoGzOSONvkPjTtx9pyAt8L#KhyzmqvC" +
		"URJQt9s$aoestJOlUzV3E5TssVEK5p7Z3pTdNliMhucl16w$obvTo#xNTj3S2Es3qOjA9vu" +
		"fkIKKpnx20EPJprqniHwzNJjDIukYzzMl6V3OpKWaOkPv$0JDARmLYp0XLaZKHurF#MVgkl" +
		"8xo8WBh9iRvvg9CEfRUx6uwZkT8lgdgk6WtAhzPAQy$2tKT$X3fdNdaTy$CSwT6kZwzE$Lx" +
		"RvIxNxLk5A7LXyv7khQmVw$cSiSSbcncYYsvlTBQVFZV60ZtDvlKPtwZbvUBv31WvIEAtCt" +
		"yQTg6f1cvb$GYFvBvP2LPGTQJgMGRsK9sagra5rbDzfBTP1$PGmuGtSz1SeWS8qV8VhAT72" +
		"SdYExx33bApf6pv0BPGCwJouHZjlYcPPqYLyaLSetmhSkwJcwGVv5Bv7Vo1xWaH9XsQ9bH5" +
		"k6wM2TfmqWw4awYIIJ9GDAJZ2GJoKooavma2yb1SfCy91l9ImgIN2I2t4RoaqBa3bAO52N5" +
		"I0bo9ob9IfFRIH6EfQntJLHnprhtCrs6y9geUmYlaIf7ofAAf3ovYvGYCQGIgK8gipBNNrK" +
		"bjKWrKflK8JNPRX$QkgG2YILnPYzympJtXkBRekBrboze6vCcX7j1DISjM9$Z1g#jQaIQCg" +
		"$xRCLulMwjTLkt0kkq8TL9IzAEj2STI2VIXNHb7zr8F$84yss9plStwwJNcFjKtKSU8Dt9W" +
		"wGpotIR3v4U9dQGwLElxIFClqpRapGWZnBT$cFaSTBBn3x9qopQfyZJf3VhlKQ6CFsCYNcM" +
		"l42Ue$yDyYRJpvkoliRsCxO$6K1UOaPVCux1UeUMnTQxjA#Ok47C3wVLVRr7#whn3sR#VTh" +
		"NQJ#X7MByx5SD9SE8xlzjut#BwFPr6m#JuSR$8T7jVCHsYjD#RFmZZFsCV40#9tfSdnh$AA" +
		"BtXkxxI$8r6SqsE2uLJ$YLPUdr64l6aF5a99b0lwuxqRJp5PbC9f4fX7gYfXEz3$bbfcOGw" +
		"fNIQvz0#9scvh8DrhFq7Xb7g4bg7bb45f0Vo5Aoc35w$4l8CdFjzHZ7c7G5CuRbX7gcLX5g" +
		"dA9sgJL4wvoUorgopiHgpQjDkv5MxxDDnazjKdE8ra7ENMaTr7jGQwEUttOJznEXFghDHDy" +
		"$ErW#ZUXvKYCLDLJf#$O0qRgfvqrzL0TD$L$eq$Uhrb6zPuyOFxLJKIyLzLDfFTCQgjUB#g" +
		"YqbkgnKKULrbskdpeVSEzHOnNrLL5J5R#H5JLJKKyLTLPHMnLrLL5hbTPGQgkjwr2xHRT3l" +
		"LNKMLlhANNLPg5DNRMffpOrq8xqzMFweYxRr5XhffUteuoV6crJVotz7Rx6b56hRUgljSZa" +
		"CnXBVRQfoHQlkMmrFkgpJKssgT6ot$Yo4kgoJSsM4#QQKsjjwhETGt#b1uujSOmszTocnii" +
		"VNbvqlMNqKUkj2DDEZwHrBEg6nMjhynbWPGbeYtfjynbW5o9y7jZKVPlF0PjwRLEtRUgwJI" +
		"srgUSsdm4szTYcpjlKSfiwBzpxDlN1ffxRr7kREcjJ9stgkiLzQLFNxHg46c$NJZaNIymSH" +
		"WIRw$$vty3h4fMObi5$GNkvGvUXwossPJJDMgWjNr7NaBq1xVKq$dF$wRYJzYiZFQl2JJzz" +
		"afMhuFLKWO2noLyvfe1sXwLIDkfFp3MJiVcI#SrxdvHFvgzbR9E$Otv$1$hRmRCgvDuCNLU" +
		"rDxQJcNVljEjWQagVdBtvFh4WY2#xiSL2r5bb#kcWtq$DcBk7xaFwfjB$dY2#oiOs3bx7zn" +
		"udtGFgd4WMCpbKdpUBre0$Kq#$gmUCOqQGTWDqnHeG49iG93Q5tY1edocl5SmwXXwdjxuSm" +
		"y00d#$TVLMoEGqEY0cf2xUAxzilnFYkf5vNRi3ydD$n3$avVAzqhl$9kjTkAkgGSz0vuEnp" +
		"jZW$EnkT3SvwPvsprbcMHgtjGRryCtTs12tPdyApDqcEx$qElpkSvK7gxWv8xmf8xmn8hmf" +
		"8hmn8yttKMH6GNnfiTCdwEvzsJD1wLzpp9h8vQFcl0UaBGSelfj7#vO3qfLJYjZhRKcyfI9" +
		"qbpc9daKdpsz6PvI#PO#n2CitldUbFBV2dvljJyvpldQdE56UooS$rb$0RpvdeJ7Ac#pq9p" +
		"knR7Qs$xbNdXiClCdH35twYD4OFjADj1uNsyFvotmJvIG4qH1uqPxevyg8PCgCjozkol8Fv" +
		"kteRP23Hg4DR1#b9EX9jqXbCMeX556emNOC#pseokxOMig0sgSao7msW$#Ueq8As1MqbMar" +
		"J5uNAjCbfRQYA25GZrGqL3LLO5aDRZpOHsn2M3Eylix68H2Ve$m8en34VntndvZipNvVMHq" +
		"iNfVy#IWGTQJlIDg9jHDkAjXLjrty3tf3DJm==");
 // Generated from spec/ErlangParser.parser
/* This code is inlined in the generated parser class */

	private final Action[] actions;

	public ErlangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] goal = module_list.module_list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_module_list = _symbols[offset + 1];
					final List module_list = (List) _symbol_module_list.value;
					 ASTNode _node_ = new Program(module_list);
      _node_.setStart(Symbol.getLine(_symbol_module_list.getStart()), (short) Symbol.getColumn(_symbol_module_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_module_list.getEnd()), (short) Symbol.getColumn(_symbol_module_list.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [1] module = LBRACKET.LBRACKET LCURLYBRACE.LCURLYBRACE ATTRIBUTE.ATTRIBUTE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ MODULE.MODULE COMMA.COMMA__ IDENTIFIER.value RCURLYBRACE.RCURLYBRACE COMMA.COMMA___ LCURLYBRACE.LCURLYBRACE_ FUNCTION.FUNCTION COMMA.COMMA____ INTEGER.INTEGER_ COMMA.COMMA_____ START.START COMMA.COMMA______ INTEGER.INTEGER__ COMMA.COMMA_______ LBRACKET.LBRACKET_ LCURLYBRACE.LCURLYBRACE__ CLAUSE.CLAUSE COMMA.COMMA________ INTEGER.INTEGER___ COMMA.COMMA_________ LBRACKET.LBRACKET__ RBRACKET.RBRACKET COMMA.COMMA__________ LBRACKET.LBRACKET___ RBRACKET.RBRACKET_ COMMA.COMMA___________ LBRACKET.LBRACKET____ LCURLYBRACE.LCURLYBRACE___ CALL.CALL COMMA.COMMA____________ INTEGER.INTEGER____ COMMA.COMMA_____________ LCURLYBRACE.LCURLYBRACE____ ATOM.ATOM COMMA.COMMA______________ INTEGER.INTEGER_____ COMMA.COMMA_______________ REGISTER.REGISTER RCURLYBRACE.RCURLYBRACE_ COMMA.COMMA________________ LBRACKET.LBRACKET_____ LCURLYBRACE.LCURLYBRACE_____ ATOM.ATOM_ COMMA.COMMA_________________ INTEGER.INTEGER______ COMMA.COMMA__________________ IDENTIFIER.value1 RCURLYBRACE.RCURLYBRACE__ COMMA.COMMA___________________ LCURLYBRACE.LCURLYBRACE______ CALL.CALL_ COMMA.COMMA____________________ INTEGER.INTEGER_______ COMMA.COMMA_____________________ LCURLYBRACE.LCURLYBRACE_______ ATOM.ATOM__ COMMA.COMMA______________________ INTEGER.INTEGER________ COMMA.COMMA_______________________ SPAWN.SPAWN RCURLYBRACE.RCURLYBRACE___ COMMA.COMMA________________________ LBRACKET.LBRACKET______ LCURLYBRACE.LCURLYBRACE________ ATOM.ATOM___ COMMA.COMMA_________________________ INTEGER.INTEGER_________ COMMA.COMMA__________________________ IDENTIFIER.value2 RCURLYBRACE.RCURLYBRACE____ COMMA.COMMA___________________________ LCURLYBRACE.LCURLYBRACE_________ ATOM.ATOM____ COMMA.COMMA____________________________ INTEGER.INTEGER__________ COMMA.COMMA_____________________________ IDENTIFIER.funName RCURLYBRACE.RCURLYBRACE_____ COMMA.COMMA______________________________ LCURLYBRACE.LCURLYBRACE__________ NULL.NULL COMMA.COMMA_______________________________ INTEGER.INTEGER___________ RCURLYBRACE.RCURLYBRACE______ RBRACKET.RBRACKET__ RCURLYBRACE.RCURLYBRACE_______ RBRACKET.RBRACKET___ RCURLYBRACE.RCURLYBRACE________ RBRACKET.RBRACKET____ RCURLYBRACE.RCURLYBRACE_________ RBRACKET.RBRACKET_____ RCURLYBRACE.RCURLYBRACE__________ COMMA.COMMA________________________________ function_list.function_list RBRACKET.RBRACKET______
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LBRACKET = _symbols[offset + 1];
					final Symbol LCURLYBRACE = _symbols[offset + 2];
					final Symbol ATTRIBUTE = _symbols[offset + 3];
					final Symbol COMMA = _symbols[offset + 4];
					final Symbol INTEGER = _symbols[offset + 5];
					final Symbol COMMA_ = _symbols[offset + 6];
					final Symbol MODULE = _symbols[offset + 7];
					final Symbol COMMA__ = _symbols[offset + 8];
					final Symbol value = _symbols[offset + 9];
					final Symbol RCURLYBRACE = _symbols[offset + 10];
					final Symbol COMMA___ = _symbols[offset + 11];
					final Symbol LCURLYBRACE_ = _symbols[offset + 12];
					final Symbol FUNCTION = _symbols[offset + 13];
					final Symbol COMMA____ = _symbols[offset + 14];
					final Symbol INTEGER_ = _symbols[offset + 15];
					final Symbol COMMA_____ = _symbols[offset + 16];
					final Symbol START = _symbols[offset + 17];
					final Symbol COMMA______ = _symbols[offset + 18];
					final Symbol INTEGER__ = _symbols[offset + 19];
					final Symbol COMMA_______ = _symbols[offset + 20];
					final Symbol LBRACKET_ = _symbols[offset + 21];
					final Symbol LCURLYBRACE__ = _symbols[offset + 22];
					final Symbol CLAUSE = _symbols[offset + 23];
					final Symbol COMMA________ = _symbols[offset + 24];
					final Symbol INTEGER___ = _symbols[offset + 25];
					final Symbol COMMA_________ = _symbols[offset + 26];
					final Symbol LBRACKET__ = _symbols[offset + 27];
					final Symbol RBRACKET = _symbols[offset + 28];
					final Symbol COMMA__________ = _symbols[offset + 29];
					final Symbol LBRACKET___ = _symbols[offset + 30];
					final Symbol RBRACKET_ = _symbols[offset + 31];
					final Symbol COMMA___________ = _symbols[offset + 32];
					final Symbol LBRACKET____ = _symbols[offset + 33];
					final Symbol LCURLYBRACE___ = _symbols[offset + 34];
					final Symbol CALL = _symbols[offset + 35];
					final Symbol COMMA____________ = _symbols[offset + 36];
					final Symbol INTEGER____ = _symbols[offset + 37];
					final Symbol COMMA_____________ = _symbols[offset + 38];
					final Symbol LCURLYBRACE____ = _symbols[offset + 39];
					final Symbol ATOM = _symbols[offset + 40];
					final Symbol COMMA______________ = _symbols[offset + 41];
					final Symbol INTEGER_____ = _symbols[offset + 42];
					final Symbol COMMA_______________ = _symbols[offset + 43];
					final Symbol REGISTER = _symbols[offset + 44];
					final Symbol RCURLYBRACE_ = _symbols[offset + 45];
					final Symbol COMMA________________ = _symbols[offset + 46];
					final Symbol LBRACKET_____ = _symbols[offset + 47];
					final Symbol LCURLYBRACE_____ = _symbols[offset + 48];
					final Symbol ATOM_ = _symbols[offset + 49];
					final Symbol COMMA_________________ = _symbols[offset + 50];
					final Symbol INTEGER______ = _symbols[offset + 51];
					final Symbol COMMA__________________ = _symbols[offset + 52];
					final Symbol value1 = _symbols[offset + 53];
					final Symbol RCURLYBRACE__ = _symbols[offset + 54];
					final Symbol COMMA___________________ = _symbols[offset + 55];
					final Symbol LCURLYBRACE______ = _symbols[offset + 56];
					final Symbol CALL_ = _symbols[offset + 57];
					final Symbol COMMA____________________ = _symbols[offset + 58];
					final Symbol INTEGER_______ = _symbols[offset + 59];
					final Symbol COMMA_____________________ = _symbols[offset + 60];
					final Symbol LCURLYBRACE_______ = _symbols[offset + 61];
					final Symbol ATOM__ = _symbols[offset + 62];
					final Symbol COMMA______________________ = _symbols[offset + 63];
					final Symbol INTEGER________ = _symbols[offset + 64];
					final Symbol COMMA_______________________ = _symbols[offset + 65];
					final Symbol SPAWN = _symbols[offset + 66];
					final Symbol RCURLYBRACE___ = _symbols[offset + 67];
					final Symbol COMMA________________________ = _symbols[offset + 68];
					final Symbol LBRACKET______ = _symbols[offset + 69];
					final Symbol LCURLYBRACE________ = _symbols[offset + 70];
					final Symbol ATOM___ = _symbols[offset + 71];
					final Symbol COMMA_________________________ = _symbols[offset + 72];
					final Symbol INTEGER_________ = _symbols[offset + 73];
					final Symbol COMMA__________________________ = _symbols[offset + 74];
					final Symbol value2 = _symbols[offset + 75];
					final Symbol RCURLYBRACE____ = _symbols[offset + 76];
					final Symbol COMMA___________________________ = _symbols[offset + 77];
					final Symbol LCURLYBRACE_________ = _symbols[offset + 78];
					final Symbol ATOM____ = _symbols[offset + 79];
					final Symbol COMMA____________________________ = _symbols[offset + 80];
					final Symbol INTEGER__________ = _symbols[offset + 81];
					final Symbol COMMA_____________________________ = _symbols[offset + 82];
					final Symbol funName = _symbols[offset + 83];
					final Symbol RCURLYBRACE_____ = _symbols[offset + 84];
					final Symbol COMMA______________________________ = _symbols[offset + 85];
					final Symbol LCURLYBRACE__________ = _symbols[offset + 86];
					final Symbol NULL = _symbols[offset + 87];
					final Symbol COMMA_______________________________ = _symbols[offset + 88];
					final Symbol INTEGER___________ = _symbols[offset + 89];
					final Symbol RCURLYBRACE______ = _symbols[offset + 90];
					final Symbol RBRACKET__ = _symbols[offset + 91];
					final Symbol RCURLYBRACE_______ = _symbols[offset + 92];
					final Symbol RBRACKET___ = _symbols[offset + 93];
					final Symbol RCURLYBRACE________ = _symbols[offset + 94];
					final Symbol RBRACKET____ = _symbols[offset + 95];
					final Symbol RCURLYBRACE_________ = _symbols[offset + 96];
					final Symbol RBRACKET_____ = _symbols[offset + 97];
					final Symbol RCURLYBRACE__________ = _symbols[offset + 98];
					final Symbol COMMA________________________________ = _symbols[offset + 99];
					final Symbol _symbol_function_list = _symbols[offset + 100];
					final List function_list = (List) _symbol_function_list.value;
					final Symbol RBRACKET______ = _symbols[offset + 101];
					 ASTNode _node_ = new Module(((String)value.value), ((String)value1.value), ((String)value2.value), ((String)funName.value), function_list);
      _node_.setStart(Symbol.getLine(LBRACKET.getStart()), (short) Symbol.getColumn(LBRACKET.getStart()));
      _node_.setEnd(Symbol.getLine(RBRACKET______.getEnd()), (short) Symbol.getColumn(RBRACKET______.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [2] module_list = module.module
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_module = _symbols[offset + 1];
					final Module module = (Module) _symbol_module.value;
					 ASTNode _node_ = new List().add(module);
      _node_.setStart(Symbol.getLine(_symbol_module.getStart()), (short) Symbol.getColumn(_symbol_module.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_module.getEnd()), (short) Symbol.getColumn(_symbol_module.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [3] module_list = module_list.module_list COMMA.COMMA module.module
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_module_list = _symbols[offset + 1];
					final List module_list = (List) _symbol_module_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_module = _symbols[offset + 3];
					final Module module = (Module) _symbol_module.value;
					 ASTNode _node_ = module_list.add(module);
      _node_.setStart(Symbol.getLine(_symbol_module_list.getStart()), (short) Symbol.getColumn(_symbol_module_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_module.getEnd()), (short) Symbol.getColumn(_symbol_module.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [4] function_list = function.function
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_function = _symbols[offset + 1];
					final Function function = (Function) _symbol_function.value;
					 ASTNode _node_ = new List().add(function);
      _node_.setStart(Symbol.getLine(_symbol_function.getStart()), (short) Symbol.getColumn(_symbol_function.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_function.getEnd()), (short) Symbol.getColumn(_symbol_function.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [5] function_list = function_list.function_list COMMA.COMMA function.function
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_function_list = _symbols[offset + 1];
					final List function_list = (List) _symbol_function_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_function = _symbols[offset + 3];
					final Function function = (Function) _symbol_function.value;
					 ASTNode _node_ = function_list.add(function);
      _node_.setStart(Symbol.getLine(_symbol_function_list.getStart()), (short) Symbol.getColumn(_symbol_function_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_function.getEnd()), (short) Symbol.getColumn(_symbol_function.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [6] function = LCURLYBRACE.LCURLYBRACE FUNCTION.FUNCTION COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ IDENTIFIER.funName COMMA.COMMA__ INTEGER.numArguments COMMA.COMMA___ LBRACKET.LBRACKET LCURLYBRACE.LCURLYBRACE_ CLAUSE.CLAUSE COMMA.COMMA____ INTEGER.INTEGER_ COMMA.COMMA_____ LBRACKET.LBRACKET_ variable_list_opt.vars RBRACKET.RBRACKET COMMA.COMMA______ LBRACKET.LBRACKET__ RBRACKET.RBRACKET_ COMMA.COMMA_______ LBRACKET.LBRACKET___ process.process RBRACKET.RBRACKET__ RCURLYBRACE.RCURLYBRACE RBRACKET.RBRACKET___ RCURLYBRACE.RCURLYBRACE_
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol FUNCTION = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol funName = _symbols[offset + 6];
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol numArguments = _symbols[offset + 8];
					final Symbol COMMA___ = _symbols[offset + 9];
					final Symbol LBRACKET = _symbols[offset + 10];
					final Symbol LCURLYBRACE_ = _symbols[offset + 11];
					final Symbol CLAUSE = _symbols[offset + 12];
					final Symbol COMMA____ = _symbols[offset + 13];
					final Symbol INTEGER_ = _symbols[offset + 14];
					final Symbol COMMA_____ = _symbols[offset + 15];
					final Symbol LBRACKET_ = _symbols[offset + 16];
					final Symbol _symbol_vars = _symbols[offset + 17];
					final List vars = (List) _symbol_vars.value;
					final Symbol RBRACKET = _symbols[offset + 18];
					final Symbol COMMA______ = _symbols[offset + 19];
					final Symbol LBRACKET__ = _symbols[offset + 20];
					final Symbol RBRACKET_ = _symbols[offset + 21];
					final Symbol COMMA_______ = _symbols[offset + 22];
					final Symbol LBRACKET___ = _symbols[offset + 23];
					final Symbol _symbol_process = _symbols[offset + 24];
					final Process process = (Process) _symbol_process.value;
					final Symbol RBRACKET__ = _symbols[offset + 25];
					final Symbol RCURLYBRACE = _symbols[offset + 26];
					final Symbol RBRACKET___ = _symbols[offset + 27];
					final Symbol RCURLYBRACE_ = _symbols[offset + 28];
					 ASTNode _node_ = new Function(new Opt(), ((String)funName.value), vars, process);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE_.getEnd()), (short) Symbol.getColumn(RCURLYBRACE_.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [7] function = funtype.funtype LCURLYBRACE.LCURLYBRACE FUNCTION.FUNCTION COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ IDENTIFIER.funName COMMA.COMMA__ INTEGER.numArguments COMMA.COMMA___ LBRACKET.LBRACKET LCURLYBRACE.LCURLYBRACE_ CLAUSE.CLAUSE COMMA.COMMA____ INTEGER.INTEGER_ COMMA.COMMA_____ LBRACKET.LBRACKET_ variable_list_opt.vars RBRACKET.RBRACKET COMMA.COMMA______ LBRACKET.LBRACKET__ RBRACKET.RBRACKET_ COMMA.COMMA_______ LBRACKET.LBRACKET___ process.process RBRACKET.RBRACKET__ RCURLYBRACE.RCURLYBRACE RBRACKET.RBRACKET___ RCURLYBRACE.RCURLYBRACE_
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_funtype = _symbols[offset + 1];
					final FunType funtype = (FunType) _symbol_funtype.value;
					final Symbol LCURLYBRACE = _symbols[offset + 2];
					final Symbol FUNCTION = _symbols[offset + 3];
					final Symbol COMMA = _symbols[offset + 4];
					final Symbol INTEGER = _symbols[offset + 5];
					final Symbol COMMA_ = _symbols[offset + 6];
					final Symbol funName = _symbols[offset + 7];
					final Symbol COMMA__ = _symbols[offset + 8];
					final Symbol numArguments = _symbols[offset + 9];
					final Symbol COMMA___ = _symbols[offset + 10];
					final Symbol LBRACKET = _symbols[offset + 11];
					final Symbol LCURLYBRACE_ = _symbols[offset + 12];
					final Symbol CLAUSE = _symbols[offset + 13];
					final Symbol COMMA____ = _symbols[offset + 14];
					final Symbol INTEGER_ = _symbols[offset + 15];
					final Symbol COMMA_____ = _symbols[offset + 16];
					final Symbol LBRACKET_ = _symbols[offset + 17];
					final Symbol _symbol_vars = _symbols[offset + 18];
					final List vars = (List) _symbol_vars.value;
					final Symbol RBRACKET = _symbols[offset + 19];
					final Symbol COMMA______ = _symbols[offset + 20];
					final Symbol LBRACKET__ = _symbols[offset + 21];
					final Symbol RBRACKET_ = _symbols[offset + 22];
					final Symbol COMMA_______ = _symbols[offset + 23];
					final Symbol LBRACKET___ = _symbols[offset + 24];
					final Symbol _symbol_process = _symbols[offset + 25];
					final Process process = (Process) _symbol_process.value;
					final Symbol RBRACKET__ = _symbols[offset + 26];
					final Symbol RCURLYBRACE = _symbols[offset + 27];
					final Symbol RBRACKET___ = _symbols[offset + 28];
					final Symbol RCURLYBRACE_ = _symbols[offset + 29];
					 ASTNode _node_ = new Function(new Opt(funtype), ((String)funName.value), vars, process);
      _node_.setStart(Symbol.getLine(_symbol_funtype.getStart()), (short) Symbol.getColumn(_symbol_funtype.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE_.getEnd()), (short) Symbol.getColumn(RCURLYBRACE_.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [8] funtype = LCURLYBRACE.LCURLYBRACE ATTRIBUTE.ATTRIBUTE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ TYPE.TYPE COMMA.COMMA__ LCURLYBRACE.LCURLYBRACE_ IDENTIFIER.fun COMMA.COMMA___ LCURLYBRACE.LCURLYBRACE__ ATOM.ATOM COMMA.COMMA____ INTEGER.INTEGER_ COMMA.COMMA_____ SINGLEMARKS.SINGLEMARKS session.session SINGLEMARKS.SINGLEMARKS_ RCURLYBRACE.RCURLYBRACE COMMA.COMMA______ LBRACKET.LBRACKET RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE_ RCURLYBRACE.RCURLYBRACE__ COMMA.COMMA_______
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol ATTRIBUTE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol TYPE = _symbols[offset + 6];
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol LCURLYBRACE_ = _symbols[offset + 8];
					final Symbol fun = _symbols[offset + 9];
					final Symbol COMMA___ = _symbols[offset + 10];
					final Symbol LCURLYBRACE__ = _symbols[offset + 11];
					final Symbol ATOM = _symbols[offset + 12];
					final Symbol COMMA____ = _symbols[offset + 13];
					final Symbol INTEGER_ = _symbols[offset + 14];
					final Symbol COMMA_____ = _symbols[offset + 15];
					final Symbol SINGLEMARKS = _symbols[offset + 16];
					final Symbol _symbol_session = _symbols[offset + 17];
					final Session session = (Session) _symbol_session.value;
					final Symbol SINGLEMARKS_ = _symbols[offset + 18];
					final Symbol RCURLYBRACE = _symbols[offset + 19];
					final Symbol COMMA______ = _symbols[offset + 20];
					final Symbol LBRACKET = _symbols[offset + 21];
					final Symbol RBRACKET = _symbols[offset + 22];
					final Symbol RCURLYBRACE_ = _symbols[offset + 23];
					final Symbol RCURLYBRACE__ = _symbols[offset + 24];
					final Symbol COMMA_______ = _symbols[offset + 25];
					 ASTNode _node_ = new FunType(((String)fun.value), new List(), session );
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(COMMA_______.getEnd()), (short) Symbol.getColumn(COMMA_______.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [9] receive_clause = LCURLYBRACE.LCURLYBRACE CLAUSE.CLAUSE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET LCURLYBRACE.LCURLYBRACE_ TUPLE.TUPLE COMMA.COMMA__ INTEGER.INTEGER_ COMMA.COMMA___ LBRACKET.LBRACKET_ atom.sender COMMA.COMMA____ atom.label COMMA.COMMA_____ pattern_list_opt.vars RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE RBRACKET.RBRACKET_ COMMA.COMMA______ LBRACKET.LBRACKET__ RBRACKET.RBRACKET__ COMMA.COMMA_______ LBRACKET.LBRACKET___ process.process RBRACKET.RBRACKET___ RCURLYBRACE.RCURLYBRACE_
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CLAUSE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol LCURLYBRACE_ = _symbols[offset + 7];
					final Symbol TUPLE = _symbols[offset + 8];
					final Symbol COMMA__ = _symbols[offset + 9];
					final Symbol INTEGER_ = _symbols[offset + 10];
					final Symbol COMMA___ = _symbols[offset + 11];
					final Symbol LBRACKET_ = _symbols[offset + 12];
					final Symbol _symbol_sender = _symbols[offset + 13];
					final Atom sender = (Atom) _symbol_sender.value;
					final Symbol COMMA____ = _symbols[offset + 14];
					final Symbol _symbol_label = _symbols[offset + 15];
					final Atom label = (Atom) _symbol_label.value;
					final Symbol COMMA_____ = _symbols[offset + 16];
					final Symbol _symbol_vars = _symbols[offset + 17];
					final List vars = (List) _symbol_vars.value;
					final Symbol RBRACKET = _symbols[offset + 18];
					final Symbol RCURLYBRACE = _symbols[offset + 19];
					final Symbol RBRACKET_ = _symbols[offset + 20];
					final Symbol COMMA______ = _symbols[offset + 21];
					final Symbol LBRACKET__ = _symbols[offset + 22];
					final Symbol RBRACKET__ = _symbols[offset + 23];
					final Symbol COMMA_______ = _symbols[offset + 24];
					final Symbol LBRACKET___ = _symbols[offset + 25];
					final Symbol _symbol_process = _symbols[offset + 26];
					final Process process = (Process) _symbol_process.value;
					final Symbol RBRACKET___ = _symbols[offset + 27];
					final Symbol RCURLYBRACE_ = _symbols[offset + 28];
					 ASTNode _node_ = new ReceiveClause(sender, label, vars, process);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE_.getEnd()), (short) Symbol.getColumn(RCURLYBRACE_.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [10] receive_clause = LCURLYBRACE.LCURLYBRACE CLAUSE.CLAUSE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET LCURLYBRACE.LCURLYBRACE_ TUPLE.TUPLE COMMA.COMMA__ INTEGER.INTEGER_ COMMA.COMMA___ LBRACKET.LBRACKET_ atom.sender COMMA.COMMA____ atom.label RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE RBRACKET.RBRACKET_ COMMA.COMMA_____ LBRACKET.LBRACKET__ RBRACKET.RBRACKET__ COMMA.COMMA______ LBRACKET.LBRACKET___ process.process RBRACKET.RBRACKET___ RCURLYBRACE.RCURLYBRACE_
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CLAUSE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol LCURLYBRACE_ = _symbols[offset + 7];
					final Symbol TUPLE = _symbols[offset + 8];
					final Symbol COMMA__ = _symbols[offset + 9];
					final Symbol INTEGER_ = _symbols[offset + 10];
					final Symbol COMMA___ = _symbols[offset + 11];
					final Symbol LBRACKET_ = _symbols[offset + 12];
					final Symbol _symbol_sender = _symbols[offset + 13];
					final Atom sender = (Atom) _symbol_sender.value;
					final Symbol COMMA____ = _symbols[offset + 14];
					final Symbol _symbol_label = _symbols[offset + 15];
					final Atom label = (Atom) _symbol_label.value;
					final Symbol RBRACKET = _symbols[offset + 16];
					final Symbol RCURLYBRACE = _symbols[offset + 17];
					final Symbol RBRACKET_ = _symbols[offset + 18];
					final Symbol COMMA_____ = _symbols[offset + 19];
					final Symbol LBRACKET__ = _symbols[offset + 20];
					final Symbol RBRACKET__ = _symbols[offset + 21];
					final Symbol COMMA______ = _symbols[offset + 22];
					final Symbol LBRACKET___ = _symbols[offset + 23];
					final Symbol _symbol_process = _symbols[offset + 24];
					final Process process = (Process) _symbol_process.value;
					final Symbol RBRACKET___ = _symbols[offset + 25];
					final Symbol RCURLYBRACE_ = _symbols[offset + 26];
					 ASTNode _node_ = new ReceiveClause(sender, label, new List(), process);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE_.getEnd()), (short) Symbol.getColumn(RCURLYBRACE_.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [11] case_clause = LCURLYBRACE.LCURLYBRACE CLAUSE.CLAUSE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET pattern_list.patterns RBRACKET.RBRACKET COMMA.COMMA__ LBRACKET.LBRACKET_ RBRACKET.RBRACKET_ COMMA.COMMA___ LBRACKET.LBRACKET__ process.process RBRACKET.RBRACKET__ RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CLAUSE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol _symbol_patterns = _symbols[offset + 7];
					final List patterns = (List) _symbol_patterns.value;
					final Symbol RBRACKET = _symbols[offset + 8];
					final Symbol COMMA__ = _symbols[offset + 9];
					final Symbol LBRACKET_ = _symbols[offset + 10];
					final Symbol RBRACKET_ = _symbols[offset + 11];
					final Symbol COMMA___ = _symbols[offset + 12];
					final Symbol LBRACKET__ = _symbols[offset + 13];
					final Symbol _symbol_process = _symbols[offset + 14];
					final Process process = (Process) _symbol_process.value;
					final Symbol RBRACKET__ = _symbols[offset + 15];
					final Symbol RCURLYBRACE = _symbols[offset + 16];
					 ASTNode _node_ = new CaseClause(patterns, process);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [12] case_clause_list = case_clause.case_clause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_case_clause = _symbols[offset + 1];
					final CaseClause case_clause = (CaseClause) _symbol_case_clause.value;
					 ASTNode _node_ = new List().add(case_clause);
      _node_.setStart(Symbol.getLine(_symbol_case_clause.getStart()), (short) Symbol.getColumn(_symbol_case_clause.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_case_clause.getEnd()), (short) Symbol.getColumn(_symbol_case_clause.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [13] case_clause_list = case_clause_list.case_clause_list COMMA.COMMA case_clause.case_clause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_case_clause_list = _symbols[offset + 1];
					final List case_clause_list = (List) _symbol_case_clause_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_case_clause = _symbols[offset + 3];
					final CaseClause case_clause = (CaseClause) _symbol_case_clause.value;
					 ASTNode _node_ = case_clause_list.add(case_clause);
      _node_.setStart(Symbol.getLine(_symbol_case_clause_list.getStart()), (short) Symbol.getColumn(_symbol_case_clause_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_case_clause.getEnd()), (short) Symbol.getColumn(_symbol_case_clause.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [14] receive_clause_list = receive_clause.receive_clause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_receive_clause = _symbols[offset + 1];
					final ReceiveClause receive_clause = (ReceiveClause) _symbol_receive_clause.value;
					 ASTNode _node_ = new List().add(receive_clause);
      _node_.setStart(Symbol.getLine(_symbol_receive_clause.getStart()), (short) Symbol.getColumn(_symbol_receive_clause.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_receive_clause.getEnd()), (short) Symbol.getColumn(_symbol_receive_clause.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [15] receive_clause_list = receive_clause_list.receive_clause_list COMMA.COMMA receive_clause.receive_clause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_receive_clause_list = _symbols[offset + 1];
					final List receive_clause_list = (List) _symbol_receive_clause_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_receive_clause = _symbols[offset + 3];
					final ReceiveClause receive_clause = (ReceiveClause) _symbol_receive_clause.value;
					 ASTNode _node_ = receive_clause_list.add(receive_clause);
      _node_.setStart(Symbol.getLine(_symbol_receive_clause_list.getStart()), (short) Symbol.getColumn(_symbol_receive_clause_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_receive_clause.getEnd()), (short) Symbol.getColumn(_symbol_receive_clause.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [16] message = LCURLYBRACE.LCURLYBRACE TUPLE.TUPLE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET sender_id.recipient COMMA.COMMA__ atom.label COMMA.COMMA___ expression_list.expression_list RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol TUPLE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol _symbol_recipient = _symbols[offset + 7];
					final SenderId recipient = (SenderId) _symbol_recipient.value;
					final Symbol COMMA__ = _symbols[offset + 8];
					final Symbol _symbol_label = _symbols[offset + 9];
					final Atom label = (Atom) _symbol_label.value;
					final Symbol COMMA___ = _symbols[offset + 10];
					final Symbol _symbol_expression_list = _symbols[offset + 11];
					final List expression_list = (List) _symbol_expression_list.value;
					final Symbol RBRACKET = _symbols[offset + 12];
					final Symbol RCURLYBRACE = _symbols[offset + 13];
					 ASTNode _node_ = new Message(recipient, label, expression_list);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [17] message = LCURLYBRACE.LCURLYBRACE TUPLE.TUPLE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET sender_id.recipient COMMA.COMMA__ atom.label RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol TUPLE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol _symbol_recipient = _symbols[offset + 7];
					final SenderId recipient = (SenderId) _symbol_recipient.value;
					final Symbol COMMA__ = _symbols[offset + 8];
					final Symbol _symbol_label = _symbols[offset + 9];
					final Atom label = (Atom) _symbol_label.value;
					final Symbol RBRACKET = _symbols[offset + 10];
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					 ASTNode _node_ = new Message(recipient, label, new List());
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [18] process = LCURLYBRACE.LCURLYBRACE OPERATOR.OPERATOR COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ SEND.SEND COMMA.COMMA__ atom.dest COMMA.COMMA___ message.message RCURLYBRACE.RCURLYBRACE COMMA.COMMA____ process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol OPERATOR = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol SEND = _symbols[offset + 6];
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol _symbol_dest = _symbols[offset + 8];
					final Atom dest = (Atom) _symbol_dest.value;
					final Symbol COMMA___ = _symbols[offset + 9];
					final Symbol _symbol_message = _symbols[offset + 10];
					final Message message = (Message) _symbol_message.value;
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					final Symbol COMMA____ = _symbols[offset + 12];
					final Symbol _symbol_next = _symbols[offset + 13];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new Send(dest, message,next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [19] process = LCURLYBRACE.LCURLYBRACE OPERATOR.OPERATOR COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ SEND.SEND COMMA.COMMA__ atom.dest COMMA.COMMA___ message.message RCURLYBRACE.RCURLYBRACE process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol OPERATOR = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol SEND = _symbols[offset + 6];
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol _symbol_dest = _symbols[offset + 8];
					final Atom dest = (Atom) _symbol_dest.value;
					final Symbol COMMA___ = _symbols[offset + 9];
					final Symbol _symbol_message = _symbols[offset + 10];
					final Message message = (Message) _symbol_message.value;
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					final Symbol _symbol_next = _symbols[offset + 12];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new Send(dest, message,next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [20] process = LCURLYBRACE.LCURLYBRACE RECEIVE.RECEIVE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET receive_clause_list.clauses RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol RECEIVE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol _symbol_clauses = _symbols[offset + 7];
					final List clauses = (List) _symbol_clauses.value;
					final Symbol RBRACKET = _symbols[offset + 8];
					final Symbol RCURLYBRACE = _symbols[offset + 9];
					final Symbol _symbol_next = _symbols[offset + 10];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new Receive(clauses, next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [21] process = LCURLYBRACE.LCURLYBRACE RECEIVE.RECEIVE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET receive_clause_list.clauses RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE COMMA.COMMA__ process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol RECEIVE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol _symbol_clauses = _symbols[offset + 7];
					final List clauses = (List) _symbol_clauses.value;
					final Symbol RBRACKET = _symbols[offset + 8];
					final Symbol RCURLYBRACE = _symbols[offset + 9];
					final Symbol COMMA__ = _symbols[offset + 10];
					final Symbol _symbol_next = _symbols[offset + 11];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new Receive(clauses, next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [22] process = LCURLYBRACE.LCURLYBRACE CASE.CASE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ expression_list.matchingForm COMMA.COMMA__ LBRACKET.LBRACKET case_clause_list.clauses RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CASE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol _symbol_matchingForm = _symbols[offset + 6];
					final List matchingForm = (List) _symbol_matchingForm.value;
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol LBRACKET = _symbols[offset + 8];
					final Symbol _symbol_clauses = _symbols[offset + 9];
					final List clauses = (List) _symbol_clauses.value;
					final Symbol RBRACKET = _symbols[offset + 10];
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					final Symbol _symbol_next = _symbols[offset + 12];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new Case(matchingForm, clauses, next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [23] process = LCURLYBRACE.LCURLYBRACE CASE.CASE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ expression_list.matchingForm COMMA.COMMA__ LBRACKET.LBRACKET case_clause_list.clauses RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE COMMA.COMMA___ process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CASE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol _symbol_matchingForm = _symbols[offset + 6];
					final List matchingForm = (List) _symbol_matchingForm.value;
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol LBRACKET = _symbols[offset + 8];
					final Symbol _symbol_clauses = _symbols[offset + 9];
					final List clauses = (List) _symbol_clauses.value;
					final Symbol RBRACKET = _symbols[offset + 10];
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					final Symbol COMMA___ = _symbols[offset + 12];
					final Symbol _symbol_next = _symbols[offset + 13];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new Case(matchingForm, clauses, next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [24] process = LCURLYBRACE.LCURLYBRACE MATCH.MATCH COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ variable.left COMMA.COMMA__ expression.right RCURLYBRACE.RCURLYBRACE COMMA.COMMA___ process.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol MATCH = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol _symbol_left = _symbols[offset + 6];
					final Variable left = (Variable) _symbol_left.value;
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol _symbol_right = _symbols[offset + 8];
					final Expression right = (Expression) _symbol_right.value;
					final Symbol RCURLYBRACE = _symbols[offset + 9];
					final Symbol COMMA___ = _symbols[offset + 10];
					final Symbol _symbol_next = _symbols[offset + 11];
					final Process next = (Process) _symbol_next.value;
					 ASTNode _node_ = new Let(left, right, next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [25] process = expression.expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 1];
					final Expression expression = (Expression) _symbol_expression.value;
					 ASTNode _node_ = new ExpressionProcess(expression, new Opt());
      _node_.setStart(Symbol.getLine(_symbol_expression.getStart()), (short) Symbol.getColumn(_symbol_expression.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_expression.getEnd()), (short) Symbol.getColumn(_symbol_expression.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [26] process = expression.expression process.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 1];
					final Expression expression = (Expression) _symbol_expression.value;
					final Symbol _symbol_next = _symbols[offset + 2];
					final Process next = (Process) _symbol_next.value;
					 ASTNode _node_ = new ExpressionProcess(expression, new Opt(next));
      _node_.setStart(Symbol.getLine(_symbol_expression.getStart()), (short) Symbol.getColumn(_symbol_expression.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [27] process = expression.expression COMMA.COMMA process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 1];
					final Expression expression = (Expression) _symbol_expression.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_next = _symbols[offset + 3];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new ExpressionProcess(expression, next);
      _node_.setStart(Symbol.getLine(_symbol_expression.getStart()), (short) Symbol.getColumn(_symbol_expression.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			Action.RETURN,	// [28] expression = operator.operator
			new Action() {	// [29] expression = LCURLYBRACE.LCURLYBRACE CALL.CALL COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ atom.method COMMA.COMMA__ LBRACKET.LBRACKET expression_list_opt.arguments RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CALL = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol _symbol_method = _symbols[offset + 6];
					final Atom method = (Atom) _symbol_method.value;
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol LBRACKET = _symbols[offset + 8];
					final Symbol _symbol_arguments = _symbols[offset + 9];
					final List arguments = (List) _symbol_arguments.value;
					final Symbol RBRACKET = _symbols[offset + 10];
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					 ASTNode _node_ = new Call(method, arguments);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			Action.RETURN,	// [30] expression = register.register
			Action.RETURN,	// [31] expression = unregister.unregister
			new Action() {	// [32] expression = LCURLYBRACE.LCURLYBRACE CALL.CALL COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LCURLYBRACE.LCURLYBRACE_ ATOM.ATOM COMMA.COMMA__ INTEGER_.INTEGER_ COMMA.COMMA___ SELF.SELF RCURLYBRACE.RCURLYBRACE COMMA.COMMA____ LBRACKET.LBRACKET RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE_
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CALL = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LCURLYBRACE_ = _symbols[offset + 6];
					final Symbol ATOM = _symbols[offset + 7];
					final Symbol COMMA__ = _symbols[offset + 8];
					final Symbol INTEGER_ = _symbols[offset + 9];
					final Symbol COMMA___ = _symbols[offset + 10];
					final Symbol SELF = _symbols[offset + 11];
					final Symbol RCURLYBRACE = _symbols[offset + 12];
					final Symbol COMMA____ = _symbols[offset + 13];
					final Symbol LBRACKET = _symbols[offset + 14];
					final Symbol RBRACKET = _symbols[offset + 15];
					final Symbol RCURLYBRACE_ = _symbols[offset + 16];
					 ASTNode _node_ = new Self();
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE_.getEnd()), (short) Symbol.getColumn(RCURLYBRACE_.getEnd()));
      return new Symbol(_node_);
				}
			},
			Action.RETURN,	// [33] expression = pattern.pattern
			new Action() {	// [34] register = LCURLYBRACE.LCURLYBRACE CALL.CALL COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LCURLYBRACE.LCURLYBRACE_ ATOM.ATOM COMMA.COMMA__ INTEGER.INTEGER_ COMMA.COMMA___ REGISTER.reg RCURLYBRACE.RCURLYBRACE COMMA.COMMA____ LBRACKET.LBRACKET expression_list.arguments RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE_
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CALL = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LCURLYBRACE_ = _symbols[offset + 6];
					final Symbol ATOM = _symbols[offset + 7];
					final Symbol COMMA__ = _symbols[offset + 8];
					final Symbol INTEGER_ = _symbols[offset + 9];
					final Symbol COMMA___ = _symbols[offset + 10];
					final Symbol reg = _symbols[offset + 11];
					final Symbol RCURLYBRACE = _symbols[offset + 12];
					final Symbol COMMA____ = _symbols[offset + 13];
					final Symbol LBRACKET = _symbols[offset + 14];
					final Symbol _symbol_arguments = _symbols[offset + 15];
					final List arguments = (List) _symbol_arguments.value;
					final Symbol RBRACKET = _symbols[offset + 16];
					final Symbol RCURLYBRACE_ = _symbols[offset + 17];
					 ASTNode _node_ = new Call(new Atom(((String)reg.value)), arguments);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE_.getEnd()), (short) Symbol.getColumn(RCURLYBRACE_.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [35] unregister = LCURLYBRACE.LCURLYBRACE CALL.CALL COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LCURLYBRACE.LCURLYBRACE_ ATOM.ATOM COMMA.COMMA__ INTEGER.INTEGER_ COMMA.COMMA___ UNREGISTER.reg RCURLYBRACE.RCURLYBRACE COMMA.COMMA____ LBRACKET.LBRACKET expression_list.arguments RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE_
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CALL = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LCURLYBRACE_ = _symbols[offset + 6];
					final Symbol ATOM = _symbols[offset + 7];
					final Symbol COMMA__ = _symbols[offset + 8];
					final Symbol INTEGER_ = _symbols[offset + 9];
					final Symbol COMMA___ = _symbols[offset + 10];
					final Symbol reg = _symbols[offset + 11];
					final Symbol RCURLYBRACE = _symbols[offset + 12];
					final Symbol COMMA____ = _symbols[offset + 13];
					final Symbol LBRACKET = _symbols[offset + 14];
					final Symbol _symbol_arguments = _symbols[offset + 15];
					final List arguments = (List) _symbol_arguments.value;
					final Symbol RBRACKET = _symbols[offset + 16];
					final Symbol RCURLYBRACE_ = _symbols[offset + 17];
					 ASTNode _node_ = new Call(new Atom(((String)reg.value)), arguments);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE_.getEnd()), (short) Symbol.getColumn(RCURLYBRACE_.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [36] operator = LCURLYBRACE.LCURLYBRACE OPERATOR.OPERATOR COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ SYMBOL.sym COMMA.COMMA__ expression.op1 COMMA.COMMA___ expression.op2 RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol OPERATOR = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol sym = _symbols[offset + 6];
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol _symbol_op1 = _symbols[offset + 8];
					final Expression op1 = (Expression) _symbol_op1.value;
					final Symbol COMMA___ = _symbols[offset + 9];
					final Symbol _symbol_op2 = _symbols[offset + 10];
					final Expression op2 = (Expression) _symbol_op2.value;
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					 ASTNode _node_ = new Operator(((String)sym.value),op1, op2);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [37] operator = LCURLYBRACE.LCURLYBRACE OPERATOR.OPERATOR COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ DIVISION.sym COMMA.COMMA__ expression.op1 COMMA.COMMA___ expression.op2 RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol OPERATOR = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol sym = _symbols[offset + 6];
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol _symbol_op1 = _symbols[offset + 8];
					final Expression op1 = (Expression) _symbol_op1.value;
					final Symbol COMMA___ = _symbols[offset + 9];
					final Symbol _symbol_op2 = _symbols[offset + 10];
					final Expression op2 = (Expression) _symbol_op2.value;
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					 ASTNode _node_ = new Operator(((String)sym.value),op1, op2);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [38] operator = LCURLYBRACE.LCURLYBRACE OPERATOR.OPERATOR COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LESS.sym COMMA.COMMA__ expression.op1 COMMA.COMMA___ expression.op2 RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol OPERATOR = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol sym = _symbols[offset + 6];
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol _symbol_op1 = _symbols[offset + 8];
					final Expression op1 = (Expression) _symbol_op1.value;
					final Symbol COMMA___ = _symbols[offset + 9];
					final Symbol _symbol_op2 = _symbols[offset + 10];
					final Expression op2 = (Expression) _symbol_op2.value;
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					 ASTNode _node_ = new Operator(((String)sym.value),op1, op2);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [39] expression_list = expression.expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 1];
					final Expression expression = (Expression) _symbol_expression.value;
					 ASTNode _node_ = new List().add(expression);
      _node_.setStart(Symbol.getLine(_symbol_expression.getStart()), (short) Symbol.getColumn(_symbol_expression.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_expression.getEnd()), (short) Symbol.getColumn(_symbol_expression.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [40] expression_list = expression_list.expression_list COMMA.COMMA expression.expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression_list = _symbols[offset + 1];
					final List expression_list = (List) _symbol_expression_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_expression = _symbols[offset + 3];
					final Expression expression = (Expression) _symbol_expression.value;
					 ASTNode _node_ = expression_list.add(expression);
      _node_.setStart(Symbol.getLine(_symbol_expression_list.getStart()), (short) Symbol.getColumn(_symbol_expression_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_expression.getEnd()), (short) Symbol.getColumn(_symbol_expression.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [41] variable_list = variable.variable
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_variable = _symbols[offset + 1];
					final Variable variable = (Variable) _symbol_variable.value;
					 ASTNode _node_ = new List().add(variable);
      _node_.setStart(Symbol.getLine(_symbol_variable.getStart()), (short) Symbol.getColumn(_symbol_variable.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_variable.getEnd()), (short) Symbol.getColumn(_symbol_variable.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [42] variable_list = variable_list.variable_list COMMA.COMMA variable.variable
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_variable_list = _symbols[offset + 1];
					final List variable_list = (List) _symbol_variable_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_variable = _symbols[offset + 3];
					final Variable variable = (Variable) _symbol_variable.value;
					 ASTNode _node_ = variable_list.add(variable);
      _node_.setStart(Symbol.getLine(_symbol_variable_list.getStart()), (short) Symbol.getColumn(_symbol_variable_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_variable.getEnd()), (short) Symbol.getColumn(_symbol_variable.getEnd()));
      return new Symbol(_node_);
				}
			},
			Action.RETURN,	// [43] pattern = litteral.litteral
			Action.RETURN,	// [44] pattern = variable.variable
			new Action() {	// [45] pattern_list = pattern.pattern
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_pattern = _symbols[offset + 1];
					final Pattern pattern = (Pattern) _symbol_pattern.value;
					 ASTNode _node_ = new List().add(pattern);
      _node_.setStart(Symbol.getLine(_symbol_pattern.getStart()), (short) Symbol.getColumn(_symbol_pattern.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_pattern.getEnd()), (short) Symbol.getColumn(_symbol_pattern.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [46] pattern_list = pattern_list.pattern_list COMMA.COMMA pattern.pattern
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_pattern_list = _symbols[offset + 1];
					final List pattern_list = (List) _symbol_pattern_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_pattern = _symbols[offset + 3];
					final Pattern pattern = (Pattern) _symbol_pattern.value;
					 ASTNode _node_ = pattern_list.add(pattern);
      _node_.setStart(Symbol.getLine(_symbol_pattern_list.getStart()), (short) Symbol.getColumn(_symbol_pattern_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_pattern.getEnd()), (short) Symbol.getColumn(_symbol_pattern.getEnd()));
      return new Symbol(_node_);
				}
			},
			Action.RETURN,	// [47] litteral = atom.atom
			Action.RETURN,	// [48] litteral = pid.pid
			Action.RETURN,	// [49] litteral = number.number
			Action.RETURN,	// [50] litteral = charlist.charlist
			Action.RETURN,	// [51] litteral = boolean.boolean
			new Action() {	// [52] sender_id = variable.var
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_var = _symbols[offset + 1];
					final Variable var = (Variable) _symbol_var.value;
					 ASTNode _node_ = new VarSender(var.getIdent());
      _node_.setStart(Symbol.getLine(_symbol_var.getStart()), (short) Symbol.getColumn(_symbol_var.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_var.getEnd()), (short) Symbol.getColumn(_symbol_var.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [53] sender_id = atom.at
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_at = _symbols[offset + 1];
					final Atom at = (Atom) _symbol_at.value;
					 ASTNode _node_ = new AtomSender(at.getIdent());
      _node_.setStart(Symbol.getLine(_symbol_at.getStart()), (short) Symbol.getColumn(_symbol_at.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_at.getEnd()), (short) Symbol.getColumn(_symbol_at.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [54] number = LCURLYBRACE.LCURLYBRACE INT.INT COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ INTEGER.val RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol INT = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol val = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new Number(Integer.parseInt(((String)val.value)));
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [55] charlist = LCURLYBRACE.LCURLYBRACE STRING.STRING COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ STRINGVALUE.STRINGVALUE RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol STRING = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol STRINGVALUE = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new CharList(((String)STRINGVALUE.value));
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [56] boolean = LCURLYBRACE.LCURLYBRACE ATOM.ATOM COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ TRUE.TRUE RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol ATOM = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol TRUE = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new Boolean(true);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [57] boolean = LCURLYBRACE.LCURLYBRACE ATOM.ATOM COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ FALSE.FALSE RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol ATOM = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol FALSE = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new Boolean(false);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [58] atom = LCURLYBRACE.LCURLYBRACE ATOM.ATOM COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ IDENTIFIER.i RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol ATOM = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol i = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new Atom(((String)i.value));
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [59] atom = LCURLYBRACE.LCURLYBRACE ATOM.ATOM COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ ATOMID.ATOMID RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol ATOM = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol ATOMID = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new Atom(((String)ATOMID.value));
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [60] pid = PID.mypid
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol mypid = _symbols[offset + 1];
					 ASTNode _node_ = new Pid(((String)mypid.value));
      _node_.setStart(Symbol.getLine(mypid.getStart()), (short) Symbol.getColumn(mypid.getStart()));
      _node_.setEnd(Symbol.getLine(mypid.getEnd()), (short) Symbol.getColumn(mypid.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [61] variable = LCURLYBRACE.LCURLYBRACE VAR.VAR COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ ATOMID.ATOMID RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol VAR = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol ATOMID = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new Variable(((String)ATOMID.value).replace("'",""));
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			Action.RETURN,	// [62] session = literaltype.literaltype
			Action.RETURN,	// [63] session = sessionsend.sessionsend
			Action.RETURN,	// [64] session = sessionreceive.sessionreceive
			new Action() {	// [65] session = INTERNALCHOICE.INTERNALCHOICE LQUAD.LQUAD session_send_list.list RQUAD.RQUAD
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol INTERNALCHOICE = _symbols[offset + 1];
					final Symbol LQUAD = _symbols[offset + 2];
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					final Symbol RQUAD = _symbols[offset + 4];
					 ASTNode _node_ = new InternalChoice(list);
      _node_.setStart(Symbol.getLine(INTERNALCHOICE.getStart()), (short) Symbol.getColumn(INTERNALCHOICE.getStart()));
      _node_.setEnd(Symbol.getLine(RQUAD.getEnd()), (short) Symbol.getColumn(RQUAD.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [66] session = EXTERNALCHOICE.EXTERNALCHOICE LQUAD.LQUAD session_receive_list.list RQUAD.RQUAD
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol EXTERNALCHOICE = _symbols[offset + 1];
					final Symbol LQUAD = _symbols[offset + 2];
					final Symbol _symbol_list = _symbols[offset + 3];
					final List list = (List) _symbol_list.value;
					final Symbol RQUAD = _symbols[offset + 4];
					 ASTNode _node_ = new ExternalChoice(list);
      _node_.setStart(Symbol.getLine(EXTERNALCHOICE.getStart()), (short) Symbol.getColumn(EXTERNALCHOICE.getStart()));
      _node_.setEnd(Symbol.getLine(RQUAD.getEnd()), (short) Symbol.getColumn(RQUAD.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [67] session = OPENANGULAR.OPENANGULAR OPENANGULAR.OPENANGULAR_ IDENTIFIER.i DOT.DOT session.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol OPENANGULAR = _symbols[offset + 1];
					final Symbol OPENANGULAR_ = _symbols[offset + 2];
					final Symbol i = _symbols[offset + 3];
					final Symbol DOT = _symbols[offset + 4];
					final Symbol _symbol_next = _symbols[offset + 5];
					final Session next = (Session) _symbol_next.value;
					 ASTNode _node_ =  new RequestForwardDelegation(new Atom(((String)i.value)), next);
      _node_.setStart(Symbol.getLine(OPENANGULAR.getStart()), (short) Symbol.getColumn(OPENANGULAR.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [68] session = CLOSEANGULAR.CLOSEANGULAR CLOSEANGULAR.CLOSEANGULAR_ IDENTIFIER.i DOT.DOT session.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol CLOSEANGULAR = _symbols[offset + 1];
					final Symbol CLOSEANGULAR_ = _symbols[offset + 2];
					final Symbol i = _symbols[offset + 3];
					final Symbol DOT = _symbols[offset + 4];
					final Symbol _symbol_next = _symbols[offset + 5];
					final Session next = (Session) _symbol_next.value;
					 ASTNode _node_ =  new RequestBackwardDelegation(new Atom(((String)i.value)), next);
      _node_.setStart(Symbol.getLine(CLOSEANGULAR.getStart()), (short) Symbol.getColumn(CLOSEANGULAR.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [69] session = IDENTIFIER.i OPENANGULAR.OPENANGULAR OPENANGULAR.OPENANGULAR_ DOT.DOT session.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol OPENANGULAR = _symbols[offset + 2];
					final Symbol OPENANGULAR_ = _symbols[offset + 3];
					final Symbol DOT = _symbols[offset + 4];
					final Symbol _symbol_next = _symbols[offset + 5];
					final Session next = (Session) _symbol_next.value;
					 ASTNode _node_ =  new AcceptForwardDelegation(new Atom(((String)i.value)), next);
      _node_.setStart(Symbol.getLine(i.getStart()), (short) Symbol.getColumn(i.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [70] session = IDENTIFIER.i CLOSEANGULAR.CLOSEANGULAR CLOSEANGULAR.CLOSEANGULAR_ DOT.DOT session.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					final Symbol CLOSEANGULAR = _symbols[offset + 2];
					final Symbol CLOSEANGULAR_ = _symbols[offset + 3];
					final Symbol DOT = _symbols[offset + 4];
					final Symbol _symbol_next = _symbols[offset + 5];
					final Session next = (Session) _symbol_next.value;
					 ASTNode _node_ =  new AcceptBackwardDelegation(new Atom(((String)i.value)), next);
      _node_.setStart(Symbol.getLine(i.getStart()), (short) Symbol.getColumn(i.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [71] session = END.END
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol END = _symbols[offset + 1];
					 ASTNode _node_ = new End();
      _node_.setStart(Symbol.getLine(END.getStart()), (short) Symbol.getColumn(END.getStart()));
      _node_.setEnd(Symbol.getLine(END.getEnd()), (short) Symbol.getColumn(END.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [72] sessionsend = IDENTIFIER.sender SESSIONSEND.SESSIONSEND IDENTIFIER.label DOT.DOT session.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol sender = _symbols[offset + 1];
					final Symbol SESSIONSEND = _symbols[offset + 2];
					final Symbol label = _symbols[offset + 3];
					final Symbol DOT = _symbols[offset + 4];
					final Symbol _symbol_next = _symbols[offset + 5];
					final Session next = (Session) _symbol_next.value;
					 ASTNode _node_ = new SessionSend(new Atom(((String)sender.value)), new Atom(((String)label.value)), new List(), next);
      _node_.setStart(Symbol.getLine(sender.getStart()), (short) Symbol.getColumn(sender.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [73] sessionsend = IDENTIFIER.sender SESSIONSEND.SESSIONSEND IDENTIFIER.label OPENANGULAR.OPENANGULAR literal_type_list.l CLOSEANGULAR.CLOSEANGULAR DOT.DOT session.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol sender = _symbols[offset + 1];
					final Symbol SESSIONSEND = _symbols[offset + 2];
					final Symbol label = _symbols[offset + 3];
					final Symbol OPENANGULAR = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final List l = (List) _symbol_l.value;
					final Symbol CLOSEANGULAR = _symbols[offset + 6];
					final Symbol DOT = _symbols[offset + 7];
					final Symbol _symbol_next = _symbols[offset + 8];
					final Session next = (Session) _symbol_next.value;
					 ASTNode _node_ = new SessionSend(new Atom(((String)sender.value)), new Atom(((String)label.value)), l, next);
      _node_.setStart(Symbol.getLine(sender.getStart()), (short) Symbol.getColumn(sender.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [74] session_send_list = sessionsend.sessionsend
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_sessionsend = _symbols[offset + 1];
					final SessionSend sessionsend = (SessionSend) _symbol_sessionsend.value;
					 ASTNode _node_ = new List(sessionsend);
      _node_.setStart(Symbol.getLine(_symbol_sessionsend.getStart()), (short) Symbol.getColumn(_symbol_sessionsend.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_sessionsend.getEnd()), (short) Symbol.getColumn(_symbol_sessionsend.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [75] session_send_list = session_send_list.session_send_list COMMA.COMMA sessionsend.sessionsend
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_session_send_list = _symbols[offset + 1];
					final List session_send_list = (List) _symbol_session_send_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_sessionsend = _symbols[offset + 3];
					final SessionSend sessionsend = (SessionSend) _symbol_sessionsend.value;
					 ASTNode _node_ = session_send_list.add(sessionsend);
      _node_.setStart(Symbol.getLine(_symbol_session_send_list.getStart()), (short) Symbol.getColumn(_symbol_session_send_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_sessionsend.getEnd()), (short) Symbol.getColumn(_symbol_sessionsend.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [76] sessionreceive = IDENTIFIER.recipient SESSIONRECEIVE.SESSIONRECEIVE IDENTIFIER.label DOT.DOT session.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol recipient = _symbols[offset + 1];
					final Symbol SESSIONRECEIVE = _symbols[offset + 2];
					final Symbol label = _symbols[offset + 3];
					final Symbol DOT = _symbols[offset + 4];
					final Symbol _symbol_next = _symbols[offset + 5];
					final Session next = (Session) _symbol_next.value;
					 ASTNode _node_ = new SessionReceive(new Atom(((String)recipient.value)), new Atom(((String)label.value)), new List(), next);
      _node_.setStart(Symbol.getLine(recipient.getStart()), (short) Symbol.getColumn(recipient.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [77] sessionreceive = IDENTIFIER.recipient SESSIONRECEIVE.SESSIONRECEIVE IDENTIFIER.label OPENANGULAR.OPENANGULAR literal_type_list.l CLOSEANGULAR.CLOSEANGULAR DOT.DOT session.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol recipient = _symbols[offset + 1];
					final Symbol SESSIONRECEIVE = _symbols[offset + 2];
					final Symbol label = _symbols[offset + 3];
					final Symbol OPENANGULAR = _symbols[offset + 4];
					final Symbol _symbol_l = _symbols[offset + 5];
					final List l = (List) _symbol_l.value;
					final Symbol CLOSEANGULAR = _symbols[offset + 6];
					final Symbol DOT = _symbols[offset + 7];
					final Symbol _symbol_next = _symbols[offset + 8];
					final Session next = (Session) _symbol_next.value;
					 ASTNode _node_ = new SessionReceive(new Atom(((String)recipient.value)), new Atom(((String)label.value)), l, next);
      _node_.setStart(Symbol.getLine(recipient.getStart()), (short) Symbol.getColumn(recipient.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [78] session_receive_list = sessionreceive.sessionreceive
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_sessionreceive = _symbols[offset + 1];
					final SessionReceive sessionreceive = (SessionReceive) _symbol_sessionreceive.value;
					 ASTNode _node_ = new List(sessionreceive);
      _node_.setStart(Symbol.getLine(_symbol_sessionreceive.getStart()), (short) Symbol.getColumn(_symbol_sessionreceive.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_sessionreceive.getEnd()), (short) Symbol.getColumn(_symbol_sessionreceive.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [79] session_receive_list = session_receive_list.session_receive_list COMMA.COMMA sessionreceive.sessionreceive
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_session_receive_list = _symbols[offset + 1];
					final List session_receive_list = (List) _symbol_session_receive_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_sessionreceive = _symbols[offset + 3];
					final SessionReceive sessionreceive = (SessionReceive) _symbol_sessionreceive.value;
					 ASTNode _node_ = session_receive_list.add(sessionreceive);
      _node_.setStart(Symbol.getLine(_symbol_session_receive_list.getStart()), (short) Symbol.getColumn(_symbol_session_receive_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_sessionreceive.getEnd()), (short) Symbol.getColumn(_symbol_sessionreceive.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [80] literaltype = STRINGTYPE.STRINGTYPE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol STRINGTYPE = _symbols[offset + 1];
					 ASTNode _node_ = new StringType();
      _node_.setStart(Symbol.getLine(STRINGTYPE.getStart()), (short) Symbol.getColumn(STRINGTYPE.getStart()));
      _node_.setEnd(Symbol.getLine(STRINGTYPE.getEnd()), (short) Symbol.getColumn(STRINGTYPE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [81] literaltype = INTTYPE.INTTYPE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol INTTYPE = _symbols[offset + 1];
					 ASTNode _node_ = new IntType();
      _node_.setStart(Symbol.getLine(INTTYPE.getStart()), (short) Symbol.getColumn(INTTYPE.getStart()));
      _node_.setEnd(Symbol.getLine(INTTYPE.getEnd()), (short) Symbol.getColumn(INTTYPE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [82] literaltype = ATOMTYPE.ATOMTYPE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol ATOMTYPE = _symbols[offset + 1];
					 ASTNode _node_ = new AtomType();
      _node_.setStart(Symbol.getLine(ATOMTYPE.getStart()), (short) Symbol.getColumn(ATOMTYPE.getStart()));
      _node_.setEnd(Symbol.getLine(ATOMTYPE.getEnd()), (short) Symbol.getColumn(ATOMTYPE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [83] literal_type_list = literaltype.literaltype
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_literaltype = _symbols[offset + 1];
					final LiteralType literaltype = (LiteralType) _symbol_literaltype.value;
					 ASTNode _node_ = new List(literaltype);
      _node_.setStart(Symbol.getLine(_symbol_literaltype.getStart()), (short) Symbol.getColumn(_symbol_literaltype.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_literaltype.getEnd()), (short) Symbol.getColumn(_symbol_literaltype.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [84] literal_type_list = literal_type_list.literal_type_list COMMA.COMMA literaltype.literaltype
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_literal_type_list = _symbols[offset + 1];
					final List literal_type_list = (List) _symbol_literal_type_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_literaltype = _symbols[offset + 3];
					final LiteralType literaltype = (LiteralType) _symbol_literaltype.value;
					 ASTNode _node_ = literal_type_list.add(literaltype);
      _node_.setStart(Symbol.getLine(_symbol_literal_type_list.getStart()), (short) Symbol.getColumn(_symbol_literal_type_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_literaltype.getEnd()), (short) Symbol.getColumn(_symbol_literaltype.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [85] process_opt = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Symbol(new Opt());
				}
			},
			new Action() {	// [86] process_opt = process.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Process n = (Process) _symbol_n.value;
					 ASTNode _node_ = new Opt(n);
   _node_.setStart(Symbol.getLine(_symbol_n.getStart()), (short) Symbol.getColumn(_symbol_n.getStart()));
   _node_.setEnd(Symbol.getLine(_symbol_n.getEnd()), (short) Symbol.getColumn(_symbol_n.getEnd()));
   return new Symbol(_node_);
				}
			},
			new Action() {	// [87] expression_list_opt = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Symbol(new List());
				}
			},
			new Action() {	// [88] expression_list_opt = expression_list.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 ASTNode _node_ = n;
   _node_.setStart(Symbol.getLine(_symbol_n.getStart()), (short) Symbol.getColumn(_symbol_n.getStart()));
   _node_.setEnd(Symbol.getLine(_symbol_n.getEnd()), (short) Symbol.getColumn(_symbol_n.getEnd()));
   return new Symbol(_node_);
				}
			},
			new Action() {	// [89] variable_list_opt = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Symbol(new List());
				}
			},
			new Action() {	// [90] variable_list_opt = variable_list.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 ASTNode _node_ = n;
   _node_.setStart(Symbol.getLine(_symbol_n.getStart()), (short) Symbol.getColumn(_symbol_n.getStart()));
   _node_.setEnd(Symbol.getLine(_symbol_n.getEnd()), (short) Symbol.getColumn(_symbol_n.getEnd()));
   return new Symbol(_node_);
				}
			},
			new Action() {	// [91] pattern_list_opt = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Symbol(new List());
				}
			},
			new Action() {	// [92] pattern_list_opt = pattern_list.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 ASTNode _node_ = n;
   _node_.setStart(Symbol.getLine(_symbol_n.getStart()), (short) Symbol.getColumn(_symbol_n.getStart()));
   _node_.setEnd(Symbol.getLine(_symbol_n.getEnd()), (short) Symbol.getColumn(_symbol_n.getEnd()));
   return new Symbol(_node_);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
