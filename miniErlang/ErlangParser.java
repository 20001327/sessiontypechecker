// Generated from spec/ErlangParser.parser
/* This code is inlined before the generated parser */
	package miniErlang; 
import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "ErlangParser.beaver".
 */
public class ErlangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short COMMA = 1;
		static public final short LCURLYBRACE = 2;
		static public final short RBRACKET = 3;
		static public final short RCURLYBRACE = 4;
		static public final short INTEGER = 5;
		static public final short LBRACKET = 6;
		static public final short PID = 7;
		static public final short ATOM = 8;
		static public final short IDENTIFIER = 9;
		static public final short CLAUSE = 10;
		static public final short VAR = 11;
		static public final short CALL = 12;
		static public final short SINGLEMARKS = 13;
		static public final short FUNCTION = 14;
		static public final short INTTYPE = 15;
		static public final short STRING = 16;
		static public final short ATOMID = 17;
		static public final short ATTRIBUTE = 18;
		static public final short REGISTER = 19;
		static public final short TUPLE = 20;
		static public final short OPERATOR = 21;
		static public final short SYMBOL = 22;
		static public final short MODULE = 23;
		static public final short START = 24;
		static public final short SPAWN = 25;
		static public final short NULL = 26;
		static public final short TYPE = 27;
		static public final short INTEGER_ = 28;
		static public final short SELF = 29;
		static public final short SEND = 30;
		static public final short CASE = 31;
		static public final short RECEIVE = 32;
		static public final short MATCH = 33;
		static public final short STRINGVALUE = 34;
		static public final short TRUE = 35;
		static public final short FALSE = 36;
		static public final short VARIABLEID = 37;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pjc0UK5CKMXlzRixE9d94eABlaB4k61LG4nO2AEI42eYW6p8e9rfn1nO2AEOkO0s3E2KK" +
		"H1GCg641K553xVTLRkyvZPs65zyvxvvqtSxw#NRTktGfT$NVFI6w5RjGDkaxNQuPkqiswHL" +
		"ThccvDwvsQrZkzZFUDA592hwUBjluwN4cDrIjfQmUazHwKrdj86k$PQNpNb1sVJR0RzK1Pl" +
		"yReL2tmVkkSuhzAHT7BkfRZrvffxPN1iNdPdgnD6b#lDBsFZvwtmMbYzqtZEpADxngjKX6i" +
		"rJoOgQ$qNKnIcJglJFp3DiXoxT0o$cVAUEQKRRl#MbYXNmixIbawZLNOVVqMTdZSecDAZbK" +
		"wKWlzMEqOc#77QHEqoB8jIu$OmV7AklWuCvfZDp2RdBY7oxLQlr6wHxEZ5xNGEaNpACLncg" +
		"r57D#p8S7p99xx6Oqq2y#3kfYo$sOhbxB$pj8xqGjuPjb8VSXePjf0IzXGgwwrrfVHDBDgr" +
		"aLLL6GTL3cQgq#9wCGQprObR9p3TeG3gAzgUyGrHNohXVmpMP6QqNEghZgghRggeLgghtpL" +
		"KmDjeKPgeiPgfgPgg2tLN5jfQxLGdbggjTggbTgedTghWpghaxfg6tNJE7LK5tLNWNggXtg" +
		"fdtghh$ghZmerKDjgW0PfiBRN4Ese7JHCb#aAxQIXsaNRQLVjhfsrcuPhJutG7jfRUsaVxQ" +
		"S96gtzTO0Er14wI0ThfFRL8JfKeoWVfl4wMaVf61sd#tIi9ke4dQZZTP9ErYasNgVh39sfI" +
		"JfBv#X5dQl9EbzJTA4kqANH3#PqkIxIRRf3T#bANHAz57qLBOs#jngMepjrh#ucuZ7TheUY" +
		"bNfKZ#jfFQ5dzPpcwasze9Vqb9wt9dfLR#jblQPtkPvlwNtDjotrfJxGH$fOdsYnFjFdjfM" +
		"#qDTQgcNwHjzhkRxL2ckX7xH4F#ed$QnVzBjMQfr#rHhzeSZCCg8LbcajetVr9rSy6RrZbQ" +
		"ooLR6gLfDlRQjhEraTgsNrhO7LiqQsXJMsXkQigULppBDMjhNjR6EihMrZhQsTTRLkrjqAh" +
		"8VrjgEjf$MnVj5tqRUshMrlszaEDjo6yTt5ThCzRLSxnVQslIGROVj5osqVszyEZ9RPA1jj" +
		"Xzbu6sj7s3WxDlg6NJZUZhVZx0GxtKwqa#rKEudUJwFbH3l39jcPTgwTPUVOP2koANQsdK$" +
		"DUNQXNM0NswLsYLrfbzb5TeLTPLDjcbrjq#rQkuwOwzbb#UopLkoqDkorudtMSJEz96Qdfe" +
		"ysD2Z1JlrtzDkXWhvyxfrqu#lBtLNMR#XF8XopkFiwS#o#6RtxFEbNfwA#R79agv8gGnOQK" +
		"pqc4s#TDF5DqPHcQVoRuYbPYvfXBJRU8bjLKMm$rfgid1zdFkhde#g4R7t2oXQo#bayetof" +
		"Hwo1MQYRB#M4Y99Z3Owrc6#nfov7upmHZaqekzZdo$vhP4t4dcvnjYnqCnl5DCQL89kXdyM" +
		"z#3O9z3WhvAW79JcAUyY8CvNqa5LQQx6$VdnMbVwC6VkvPCQUPBplSud9ZBDaXhwouvZYUf" +
		"$RNrTZTzQAsoNnvCIsEBfoIglYQ8lZydW29F5cy2pnzJaXJqvAN4x8vqVfZmcUF1cbPIiTG" +
		"rxSMswSELawqinuVdxiUN4RYziamwoD9wCBCwWIv$RV0dmb6P8yzJ92FpxQIiVbIqco5g#A" +
		"ZwWRZpqZzcN6hJ92Vubu72Kz9uCloRFpBr$pE28ZvMXnxXPXrQnqJCMzTwESMph7sl6iNSe" +
		"Log0sFvvFPiYO2AkH7po9EF$wUIsU5N6ywsQcj2#9BSdkCrKgtGE9uFTNC9EM3KEVoTAiEU" +
		"mkesP3UoiU4p4P2F5DanH$ka1hM1pANrAN0qV0G3WIJeGfS2fS6JyTP3F1FobkWTlWThW4x" +
		"e0xuMwu2#w5U#01k0yUXFlXOPW53y4Zy3ZCXYVysE0fU1AUXcVXKPWBpy1py1ZCW#VXHNW1" +
		"vi3By0gy3Y$1Q$0sl0Elmdlm1io7z#5TM00Vm8Vm9dm47yD2M0IVmAUm69R0P$0vV0tBmA$" +
		"PDx0SleEby3siW9Nm1Qo27#4d#0LMms#m5jR0ElW3$eIVuLUkHK7nDR4esAqavu1pbw3yBJ" +
		"O9N4#N2LcG3RpGkah0TNHL8HUg4Ry5jWPKWPfG2wgJZFcwsb07wa7zi1TO6zS0VBj6K9SSG" +
		"x4DeGaqXMRG71YRBgM#F#UD8O$o5TXyVDjZM$gS6uEuLh0bR0tiIzS2sa1Rw00ToNS870IZ" +
		"A7U2pfoF2MlKad8tu6t35K0xO8#xhj2T#h7OdjZ3iJr2dxsW3$I5tj0Fc8SDmnR2m91xGeW" +
		"V08CeZySoDzi1EnY60ETsB1pF#OuXVgTWXmMx6smBky3ki2luTTqZr8#0FM5lu2tGxHFy#y" +
		"9#S01i1mS6$qXWFHphONxz3Wl#qS6E0TRCZOETOMpm#pNWFdVSuyxFPG8SJGvmny14pe$3d" +
		"W3UdWH#NYVZvntJdHBoe0$Ebz47TpgS0MS2w#3EXdFWN3WBYe2tK7S1EOWnF$VXS27i3nV1" +
		"P3WABWQlARuzUyjT7gu3zNP#sAFpmnZyNhiCfW4QvQR2jN0riVJbhe7f8TRh5dlPtO3rwtz" +
		"ZyDyCCy1hcX$FhLX$BRo##VotXpYqqA5n3grpQ9ppUiLOpVU9xZdqpg5x3hrpNkiOWqF$t4" +
		"EXlTSzlz#y5levpmv#DCsXXGujTEYWynhenuqEEg#3VZxedqCBtToKUmPzT7C0NNJegaCB7" +
		"Pheq4U77Zfqpw693ZrqwAL36nqQwD14v#znDDAXXmxjSsYYUmlGGuSkEgyDwA933nrwwD11" +
		"XoOwjD2XY$9ZGGiTckYM05heq4NdDMyw5brqNm4wwPQ7wtVpFz$pbX6kvUXK$$$vpy9dy5$" +
		"dDkrVa6$u1keADYsdFHNi7Tv6KRGGbgRaBGp#bPi$VgiJxESXzz3rvZ2lOddqPh0BokbdLS" +
		"avurwtQMFLYCsTxtyphD6WO5V$$RQkSR3vnLOZDzv64zECmLMyJqrAuyiAjcuvRKgUSKleg" +
		"p2CUSW6#bYsWRgfQNpDWcsRleqR5#hNfBIPaL9VPatAxzyLLJJsxyBQr2o$JdTLeFrD2f$e" +
		"T$sFV29#HqHhDx7jcWf7Bea#Hd4NH1z4xqVpe$UYLpSI$scvDL#cyV4E4Iqk9vvtZeZtcEY" +
		"rzVoVfPo$dNB#LievxpdH6odbLpOqvX3puyPZqhRxDJxo1XLzbBP#TShvgZJrFsqa$oyfvp" +
		"#N6xKe#cJ3UJRr4$4RDbeNySjL$LGeKsUDKXzi7oNK5ziNsqMDe9qAi0Lge6wg7l$BrfkwV" +
		"k5Vjbwg0fNKGTMWAkI2BrU6Ak7Sm452xV6rnzTUDQ0w#F#MFGbrnNR5jiHwjeb9g1LsVNe6" +
		"sYXBRQ5T82$GchfyBByxut#f#sFxOtjWUs3vJGcc0Vy0ZNp#cW==");
 // Generated from spec/ErlangParser.parser
/* This code is inlined in the generated parser class */

	private final Action[] actions;

	public ErlangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] goal = module_list.module_list
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_module_list = _symbols[offset + 1];
					final List module_list = (List) _symbol_module_list.value;
					 ASTNode _node_ = new Program(module_list);
      _node_.setStart(Symbol.getLine(_symbol_module_list.getStart()), (short) Symbol.getColumn(_symbol_module_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_module_list.getEnd()), (short) Symbol.getColumn(_symbol_module_list.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [1] module = LBRACKET.LBRACKET LCURLYBRACE.LCURLYBRACE ATTRIBUTE.ATTRIBUTE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ MODULE.MODULE COMMA.COMMA__ IDENTIFIER.value RCURLYBRACE.RCURLYBRACE COMMA.COMMA___ LCURLYBRACE.LCURLYBRACE_ FUNCTION.FUNCTION COMMA.COMMA____ INTEGER.INTEGER_ COMMA.COMMA_____ START.START COMMA.COMMA______ INTEGER.INTEGER__ COMMA.COMMA_______ LBRACKET.LBRACKET_ LCURLYBRACE.LCURLYBRACE__ CLAUSE.CLAUSE COMMA.COMMA________ INTEGER.INTEGER___ COMMA.COMMA_________ LBRACKET.LBRACKET__ RBRACKET.RBRACKET COMMA.COMMA__________ LBRACKET.LBRACKET___ RBRACKET.RBRACKET_ COMMA.COMMA___________ LBRACKET.LBRACKET____ LCURLYBRACE.LCURLYBRACE___ CALL.CALL COMMA.COMMA____________ INTEGER.INTEGER____ COMMA.COMMA_____________ LCURLYBRACE.LCURLYBRACE____ ATOM.ATOM COMMA.COMMA______________ INTEGER.INTEGER_____ COMMA.COMMA_______________ REGISTER.REGISTER RCURLYBRACE.RCURLYBRACE_ COMMA.COMMA________________ LBRACKET.LBRACKET_____ LCURLYBRACE.LCURLYBRACE_____ ATOM.ATOM_ COMMA.COMMA_________________ INTEGER.INTEGER______ COMMA.COMMA__________________ IDENTIFIER.value1 RCURLYBRACE.RCURLYBRACE__ COMMA.COMMA___________________ LCURLYBRACE.LCURLYBRACE______ CALL.CALL_ COMMA.COMMA____________________ INTEGER.INTEGER_______ COMMA.COMMA_____________________ LCURLYBRACE.LCURLYBRACE_______ ATOM.ATOM__ COMMA.COMMA______________________ INTEGER.INTEGER________ COMMA.COMMA_______________________ SPAWN.SPAWN RCURLYBRACE.RCURLYBRACE___ COMMA.COMMA________________________ LBRACKET.LBRACKET______ LCURLYBRACE.LCURLYBRACE________ ATOM.ATOM___ COMMA.COMMA_________________________ INTEGER.INTEGER_________ COMMA.COMMA__________________________ IDENTIFIER.value2 RCURLYBRACE.RCURLYBRACE____ COMMA.COMMA___________________________ LCURLYBRACE.LCURLYBRACE_________ ATOM.ATOM____ COMMA.COMMA____________________________ INTEGER.INTEGER__________ COMMA.COMMA_____________________________ IDENTIFIER.funName RCURLYBRACE.RCURLYBRACE_____ COMMA.COMMA______________________________ LCURLYBRACE.LCURLYBRACE__________ NULL.NULL COMMA.COMMA_______________________________ INTEGER.INTEGER___________ RCURLYBRACE.RCURLYBRACE______ RBRACKET.RBRACKET__ RCURLYBRACE.RCURLYBRACE_______ RBRACKET.RBRACKET___ RCURLYBRACE.RCURLYBRACE________ RBRACKET.RBRACKET____ RCURLYBRACE.RCURLYBRACE_________ RBRACKET.RBRACKET_____ RCURLYBRACE.RCURLYBRACE__________ COMMA.COMMA________________________________ function_list.function_list RBRACKET.RBRACKET______
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LBRACKET = _symbols[offset + 1];
					final Symbol LCURLYBRACE = _symbols[offset + 2];
					final Symbol ATTRIBUTE = _symbols[offset + 3];
					final Symbol COMMA = _symbols[offset + 4];
					final Symbol INTEGER = _symbols[offset + 5];
					final Symbol COMMA_ = _symbols[offset + 6];
					final Symbol MODULE = _symbols[offset + 7];
					final Symbol COMMA__ = _symbols[offset + 8];
					final Symbol value = _symbols[offset + 9];
					final Symbol RCURLYBRACE = _symbols[offset + 10];
					final Symbol COMMA___ = _symbols[offset + 11];
					final Symbol LCURLYBRACE_ = _symbols[offset + 12];
					final Symbol FUNCTION = _symbols[offset + 13];
					final Symbol COMMA____ = _symbols[offset + 14];
					final Symbol INTEGER_ = _symbols[offset + 15];
					final Symbol COMMA_____ = _symbols[offset + 16];
					final Symbol START = _symbols[offset + 17];
					final Symbol COMMA______ = _symbols[offset + 18];
					final Symbol INTEGER__ = _symbols[offset + 19];
					final Symbol COMMA_______ = _symbols[offset + 20];
					final Symbol LBRACKET_ = _symbols[offset + 21];
					final Symbol LCURLYBRACE__ = _symbols[offset + 22];
					final Symbol CLAUSE = _symbols[offset + 23];
					final Symbol COMMA________ = _symbols[offset + 24];
					final Symbol INTEGER___ = _symbols[offset + 25];
					final Symbol COMMA_________ = _symbols[offset + 26];
					final Symbol LBRACKET__ = _symbols[offset + 27];
					final Symbol RBRACKET = _symbols[offset + 28];
					final Symbol COMMA__________ = _symbols[offset + 29];
					final Symbol LBRACKET___ = _symbols[offset + 30];
					final Symbol RBRACKET_ = _symbols[offset + 31];
					final Symbol COMMA___________ = _symbols[offset + 32];
					final Symbol LBRACKET____ = _symbols[offset + 33];
					final Symbol LCURLYBRACE___ = _symbols[offset + 34];
					final Symbol CALL = _symbols[offset + 35];
					final Symbol COMMA____________ = _symbols[offset + 36];
					final Symbol INTEGER____ = _symbols[offset + 37];
					final Symbol COMMA_____________ = _symbols[offset + 38];
					final Symbol LCURLYBRACE____ = _symbols[offset + 39];
					final Symbol ATOM = _symbols[offset + 40];
					final Symbol COMMA______________ = _symbols[offset + 41];
					final Symbol INTEGER_____ = _symbols[offset + 42];
					final Symbol COMMA_______________ = _symbols[offset + 43];
					final Symbol REGISTER = _symbols[offset + 44];
					final Symbol RCURLYBRACE_ = _symbols[offset + 45];
					final Symbol COMMA________________ = _symbols[offset + 46];
					final Symbol LBRACKET_____ = _symbols[offset + 47];
					final Symbol LCURLYBRACE_____ = _symbols[offset + 48];
					final Symbol ATOM_ = _symbols[offset + 49];
					final Symbol COMMA_________________ = _symbols[offset + 50];
					final Symbol INTEGER______ = _symbols[offset + 51];
					final Symbol COMMA__________________ = _symbols[offset + 52];
					final Symbol value1 = _symbols[offset + 53];
					final Symbol RCURLYBRACE__ = _symbols[offset + 54];
					final Symbol COMMA___________________ = _symbols[offset + 55];
					final Symbol LCURLYBRACE______ = _symbols[offset + 56];
					final Symbol CALL_ = _symbols[offset + 57];
					final Symbol COMMA____________________ = _symbols[offset + 58];
					final Symbol INTEGER_______ = _symbols[offset + 59];
					final Symbol COMMA_____________________ = _symbols[offset + 60];
					final Symbol LCURLYBRACE_______ = _symbols[offset + 61];
					final Symbol ATOM__ = _symbols[offset + 62];
					final Symbol COMMA______________________ = _symbols[offset + 63];
					final Symbol INTEGER________ = _symbols[offset + 64];
					final Symbol COMMA_______________________ = _symbols[offset + 65];
					final Symbol SPAWN = _symbols[offset + 66];
					final Symbol RCURLYBRACE___ = _symbols[offset + 67];
					final Symbol COMMA________________________ = _symbols[offset + 68];
					final Symbol LBRACKET______ = _symbols[offset + 69];
					final Symbol LCURLYBRACE________ = _symbols[offset + 70];
					final Symbol ATOM___ = _symbols[offset + 71];
					final Symbol COMMA_________________________ = _symbols[offset + 72];
					final Symbol INTEGER_________ = _symbols[offset + 73];
					final Symbol COMMA__________________________ = _symbols[offset + 74];
					final Symbol value2 = _symbols[offset + 75];
					final Symbol RCURLYBRACE____ = _symbols[offset + 76];
					final Symbol COMMA___________________________ = _symbols[offset + 77];
					final Symbol LCURLYBRACE_________ = _symbols[offset + 78];
					final Symbol ATOM____ = _symbols[offset + 79];
					final Symbol COMMA____________________________ = _symbols[offset + 80];
					final Symbol INTEGER__________ = _symbols[offset + 81];
					final Symbol COMMA_____________________________ = _symbols[offset + 82];
					final Symbol funName = _symbols[offset + 83];
					final Symbol RCURLYBRACE_____ = _symbols[offset + 84];
					final Symbol COMMA______________________________ = _symbols[offset + 85];
					final Symbol LCURLYBRACE__________ = _symbols[offset + 86];
					final Symbol NULL = _symbols[offset + 87];
					final Symbol COMMA_______________________________ = _symbols[offset + 88];
					final Symbol INTEGER___________ = _symbols[offset + 89];
					final Symbol RCURLYBRACE______ = _symbols[offset + 90];
					final Symbol RBRACKET__ = _symbols[offset + 91];
					final Symbol RCURLYBRACE_______ = _symbols[offset + 92];
					final Symbol RBRACKET___ = _symbols[offset + 93];
					final Symbol RCURLYBRACE________ = _symbols[offset + 94];
					final Symbol RBRACKET____ = _symbols[offset + 95];
					final Symbol RCURLYBRACE_________ = _symbols[offset + 96];
					final Symbol RBRACKET_____ = _symbols[offset + 97];
					final Symbol RCURLYBRACE__________ = _symbols[offset + 98];
					final Symbol COMMA________________________________ = _symbols[offset + 99];
					final Symbol _symbol_function_list = _symbols[offset + 100];
					final List function_list = (List) _symbol_function_list.value;
					final Symbol RBRACKET______ = _symbols[offset + 101];
					 ASTNode _node_ = new Module(((String)value.value), ((String)value1.value), ((String)value2.value), ((String)funName.value), function_list);
      _node_.setStart(Symbol.getLine(LBRACKET.getStart()), (short) Symbol.getColumn(LBRACKET.getStart()));
      _node_.setEnd(Symbol.getLine(RBRACKET______.getEnd()), (short) Symbol.getColumn(RBRACKET______.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [2] module_list = module.module
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_module = _symbols[offset + 1];
					final Module module = (Module) _symbol_module.value;
					 ASTNode _node_ = new List().add(module);
      _node_.setStart(Symbol.getLine(_symbol_module.getStart()), (short) Symbol.getColumn(_symbol_module.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_module.getEnd()), (short) Symbol.getColumn(_symbol_module.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [3] module_list = module_list.module_list COMMA.COMMA module.module
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_module_list = _symbols[offset + 1];
					final List module_list = (List) _symbol_module_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_module = _symbols[offset + 3];
					final Module module = (Module) _symbol_module.value;
					 ASTNode _node_ = module_list.add(module);
      _node_.setStart(Symbol.getLine(_symbol_module_list.getStart()), (short) Symbol.getColumn(_symbol_module_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_module.getEnd()), (short) Symbol.getColumn(_symbol_module.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [4] function_list = function.function
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_function = _symbols[offset + 1];
					final Function function = (Function) _symbol_function.value;
					 ASTNode _node_ = new List().add(function);
      _node_.setStart(Symbol.getLine(_symbol_function.getStart()), (short) Symbol.getColumn(_symbol_function.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_function.getEnd()), (short) Symbol.getColumn(_symbol_function.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [5] function_list = function_list.function_list COMMA.COMMA function.function
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_function_list = _symbols[offset + 1];
					final List function_list = (List) _symbol_function_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_function = _symbols[offset + 3];
					final Function function = (Function) _symbol_function.value;
					 ASTNode _node_ = function_list.add(function);
      _node_.setStart(Symbol.getLine(_symbol_function_list.getStart()), (short) Symbol.getColumn(_symbol_function_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_function.getEnd()), (short) Symbol.getColumn(_symbol_function.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [6] function = LCURLYBRACE.LCURLYBRACE FUNCTION.FUNCTION COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ IDENTIFIER.funName COMMA.COMMA__ INTEGER.INTEGER_ COMMA.COMMA___ LBRACKET.LBRACKET LCURLYBRACE.LCURLYBRACE_ CLAUSE.CLAUSE COMMA.COMMA____ INTEGER.INTEGER__ COMMA.COMMA_____ LBRACKET.LBRACKET_ variable_list.vars RBRACKET.RBRACKET COMMA.COMMA______ LBRACKET.LBRACKET__ RBRACKET.RBRACKET_ COMMA.COMMA_______ LBRACKET.LBRACKET___ process.process RBRACKET.RBRACKET__ RCURLYBRACE.RCURLYBRACE RBRACKET.RBRACKET___ RCURLYBRACE.RCURLYBRACE_
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol FUNCTION = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol funName = _symbols[offset + 6];
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol INTEGER_ = _symbols[offset + 8];
					final Symbol COMMA___ = _symbols[offset + 9];
					final Symbol LBRACKET = _symbols[offset + 10];
					final Symbol LCURLYBRACE_ = _symbols[offset + 11];
					final Symbol CLAUSE = _symbols[offset + 12];
					final Symbol COMMA____ = _symbols[offset + 13];
					final Symbol INTEGER__ = _symbols[offset + 14];
					final Symbol COMMA_____ = _symbols[offset + 15];
					final Symbol LBRACKET_ = _symbols[offset + 16];
					final Symbol _symbol_vars = _symbols[offset + 17];
					final List vars = (List) _symbol_vars.value;
					final Symbol RBRACKET = _symbols[offset + 18];
					final Symbol COMMA______ = _symbols[offset + 19];
					final Symbol LBRACKET__ = _symbols[offset + 20];
					final Symbol RBRACKET_ = _symbols[offset + 21];
					final Symbol COMMA_______ = _symbols[offset + 22];
					final Symbol LBRACKET___ = _symbols[offset + 23];
					final Symbol _symbol_process = _symbols[offset + 24];
					final Process process = (Process) _symbol_process.value;
					final Symbol RBRACKET__ = _symbols[offset + 25];
					final Symbol RCURLYBRACE = _symbols[offset + 26];
					final Symbol RBRACKET___ = _symbols[offset + 27];
					final Symbol RCURLYBRACE_ = _symbols[offset + 28];
					 ASTNode _node_ = new Function("", ((String)funName.value), vars, process);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE_.getEnd()), (short) Symbol.getColumn(RCURLYBRACE_.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [7] function = LCURLYBRACE.LCURLYBRACE ATTRIBUTE.ATTRIBUTE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ TYPE.TYPE COMMA.COMMA__ LCURLYBRACE.LCURLYBRACE_ IDENTIFIER.funType COMMA.COMMA___ atom.atom COMMA.COMMA____ LBRACKET.LBRACKET RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE RCURLYBRACE.RCURLYBRACE_ COMMA.COMMA_____ LCURLYBRACE.LCURLYBRACE__ FUNCTION.FUNCTION COMMA.COMMA______ INTEGER.INTEGER_ COMMA.COMMA_______ IDENTIFIER.funName COMMA.COMMA________ INTEGER.numArguments COMMA.COMMA_________ LBRACKET.LBRACKET_ LCURLYBRACE.LCURLYBRACE___ CLAUSE.CLAUSE COMMA.COMMA__________ INTEGER.INTEGER__ COMMA.COMMA___________ LBRACKET.LBRACKET__ variable_list_opt.vars RBRACKET.RBRACKET_ COMMA.COMMA____________ LBRACKET.LBRACKET___ RBRACKET.RBRACKET__ COMMA.COMMA_____________ LBRACKET.LBRACKET____ process.process RBRACKET.RBRACKET___ RCURLYBRACE.RCURLYBRACE__ RBRACKET.RBRACKET____ RCURLYBRACE.RCURLYBRACE___
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol ATTRIBUTE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol TYPE = _symbols[offset + 6];
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol LCURLYBRACE_ = _symbols[offset + 8];
					final Symbol funType = _symbols[offset + 9];
					final Symbol COMMA___ = _symbols[offset + 10];
					final Symbol _symbol_atom = _symbols[offset + 11];
					final Atom atom = (Atom) _symbol_atom.value;
					final Symbol COMMA____ = _symbols[offset + 12];
					final Symbol LBRACKET = _symbols[offset + 13];
					final Symbol RBRACKET = _symbols[offset + 14];
					final Symbol RCURLYBRACE = _symbols[offset + 15];
					final Symbol RCURLYBRACE_ = _symbols[offset + 16];
					final Symbol COMMA_____ = _symbols[offset + 17];
					final Symbol LCURLYBRACE__ = _symbols[offset + 18];
					final Symbol FUNCTION = _symbols[offset + 19];
					final Symbol COMMA______ = _symbols[offset + 20];
					final Symbol INTEGER_ = _symbols[offset + 21];
					final Symbol COMMA_______ = _symbols[offset + 22];
					final Symbol funName = _symbols[offset + 23];
					final Symbol COMMA________ = _symbols[offset + 24];
					final Symbol numArguments = _symbols[offset + 25];
					final Symbol COMMA_________ = _symbols[offset + 26];
					final Symbol LBRACKET_ = _symbols[offset + 27];
					final Symbol LCURLYBRACE___ = _symbols[offset + 28];
					final Symbol CLAUSE = _symbols[offset + 29];
					final Symbol COMMA__________ = _symbols[offset + 30];
					final Symbol INTEGER__ = _symbols[offset + 31];
					final Symbol COMMA___________ = _symbols[offset + 32];
					final Symbol LBRACKET__ = _symbols[offset + 33];
					final Symbol _symbol_vars = _symbols[offset + 34];
					final List vars = (List) _symbol_vars.value;
					final Symbol RBRACKET_ = _symbols[offset + 35];
					final Symbol COMMA____________ = _symbols[offset + 36];
					final Symbol LBRACKET___ = _symbols[offset + 37];
					final Symbol RBRACKET__ = _symbols[offset + 38];
					final Symbol COMMA_____________ = _symbols[offset + 39];
					final Symbol LBRACKET____ = _symbols[offset + 40];
					final Symbol _symbol_process = _symbols[offset + 41];
					final Process process = (Process) _symbol_process.value;
					final Symbol RBRACKET___ = _symbols[offset + 42];
					final Symbol RCURLYBRACE__ = _symbols[offset + 43];
					final Symbol RBRACKET____ = _symbols[offset + 44];
					final Symbol RCURLYBRACE___ = _symbols[offset + 45];
					 ASTNode _node_ = new Function(((String)funType.value), ((String)funName.value), vars, process);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE___.getEnd()), (short) Symbol.getColumn(RCURLYBRACE___.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [8] receive_clause = LCURLYBRACE.LCURLYBRACE CLAUSE.CLAUSE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET LCURLYBRACE.LCURLYBRACE_ TUPLE.TUPLE COMMA.COMMA__ INTEGER.INTEGER_ COMMA.COMMA___ LBRACKET.LBRACKET_ atom.sender COMMA.COMMA____ atom.label COMMA.COMMA_____ pattern_list_opt.vars RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE RBRACKET.RBRACKET_ COMMA.COMMA______ LBRACKET.LBRACKET__ RBRACKET.RBRACKET__ COMMA.COMMA_______ LBRACKET.LBRACKET___ process.process RBRACKET.RBRACKET___ RCURLYBRACE.RCURLYBRACE_
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CLAUSE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol LCURLYBRACE_ = _symbols[offset + 7];
					final Symbol TUPLE = _symbols[offset + 8];
					final Symbol COMMA__ = _symbols[offset + 9];
					final Symbol INTEGER_ = _symbols[offset + 10];
					final Symbol COMMA___ = _symbols[offset + 11];
					final Symbol LBRACKET_ = _symbols[offset + 12];
					final Symbol _symbol_sender = _symbols[offset + 13];
					final Atom sender = (Atom) _symbol_sender.value;
					final Symbol COMMA____ = _symbols[offset + 14];
					final Symbol _symbol_label = _symbols[offset + 15];
					final Atom label = (Atom) _symbol_label.value;
					final Symbol COMMA_____ = _symbols[offset + 16];
					final Symbol _symbol_vars = _symbols[offset + 17];
					final List vars = (List) _symbol_vars.value;
					final Symbol RBRACKET = _symbols[offset + 18];
					final Symbol RCURLYBRACE = _symbols[offset + 19];
					final Symbol RBRACKET_ = _symbols[offset + 20];
					final Symbol COMMA______ = _symbols[offset + 21];
					final Symbol LBRACKET__ = _symbols[offset + 22];
					final Symbol RBRACKET__ = _symbols[offset + 23];
					final Symbol COMMA_______ = _symbols[offset + 24];
					final Symbol LBRACKET___ = _symbols[offset + 25];
					final Symbol _symbol_process = _symbols[offset + 26];
					final Process process = (Process) _symbol_process.value;
					final Symbol RBRACKET___ = _symbols[offset + 27];
					final Symbol RCURLYBRACE_ = _symbols[offset + 28];
					 ASTNode _node_ = new ReceiveClause(sender, label, vars, process);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE_.getEnd()), (short) Symbol.getColumn(RCURLYBRACE_.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [9] receive_clause = LCURLYBRACE.LCURLYBRACE CLAUSE.CLAUSE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET LCURLYBRACE.LCURLYBRACE_ TUPLE.TUPLE COMMA.COMMA__ INTEGER.INTEGER_ COMMA.COMMA___ LBRACKET.LBRACKET_ atom.sender COMMA.COMMA____ atom.label RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE RBRACKET.RBRACKET_ COMMA.COMMA_____ LBRACKET.LBRACKET__ RBRACKET.RBRACKET__ COMMA.COMMA______ LBRACKET.LBRACKET___ process.process RBRACKET.RBRACKET___ RCURLYBRACE.RCURLYBRACE_
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CLAUSE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol LCURLYBRACE_ = _symbols[offset + 7];
					final Symbol TUPLE = _symbols[offset + 8];
					final Symbol COMMA__ = _symbols[offset + 9];
					final Symbol INTEGER_ = _symbols[offset + 10];
					final Symbol COMMA___ = _symbols[offset + 11];
					final Symbol LBRACKET_ = _symbols[offset + 12];
					final Symbol _symbol_sender = _symbols[offset + 13];
					final Atom sender = (Atom) _symbol_sender.value;
					final Symbol COMMA____ = _symbols[offset + 14];
					final Symbol _symbol_label = _symbols[offset + 15];
					final Atom label = (Atom) _symbol_label.value;
					final Symbol RBRACKET = _symbols[offset + 16];
					final Symbol RCURLYBRACE = _symbols[offset + 17];
					final Symbol RBRACKET_ = _symbols[offset + 18];
					final Symbol COMMA_____ = _symbols[offset + 19];
					final Symbol LBRACKET__ = _symbols[offset + 20];
					final Symbol RBRACKET__ = _symbols[offset + 21];
					final Symbol COMMA______ = _symbols[offset + 22];
					final Symbol LBRACKET___ = _symbols[offset + 23];
					final Symbol _symbol_process = _symbols[offset + 24];
					final Process process = (Process) _symbol_process.value;
					final Symbol RBRACKET___ = _symbols[offset + 25];
					final Symbol RCURLYBRACE_ = _symbols[offset + 26];
					 ASTNode _node_ = new ReceiveClause(sender, label, new List(), process);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE_.getEnd()), (short) Symbol.getColumn(RCURLYBRACE_.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [10] case_clause = LCURLYBRACE.LCURLYBRACE CLAUSE.CLAUSE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET pattern_list.patterns RBRACKET.RBRACKET COMMA.COMMA__ LBRACKET.LBRACKET_ RBRACKET.RBRACKET_ COMMA.COMMA___ LBRACKET.LBRACKET__ process.process RBRACKET.RBRACKET__ RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CLAUSE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol _symbol_patterns = _symbols[offset + 7];
					final List patterns = (List) _symbol_patterns.value;
					final Symbol RBRACKET = _symbols[offset + 8];
					final Symbol COMMA__ = _symbols[offset + 9];
					final Symbol LBRACKET_ = _symbols[offset + 10];
					final Symbol RBRACKET_ = _symbols[offset + 11];
					final Symbol COMMA___ = _symbols[offset + 12];
					final Symbol LBRACKET__ = _symbols[offset + 13];
					final Symbol _symbol_process = _symbols[offset + 14];
					final Process process = (Process) _symbol_process.value;
					final Symbol RBRACKET__ = _symbols[offset + 15];
					final Symbol RCURLYBRACE = _symbols[offset + 16];
					 ASTNode _node_ = new CaseClause(patterns, process);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [11] case_clause_list = case_clause.case_clause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_case_clause = _symbols[offset + 1];
					final CaseClause case_clause = (CaseClause) _symbol_case_clause.value;
					 ASTNode _node_ = new List().add(case_clause);
      _node_.setStart(Symbol.getLine(_symbol_case_clause.getStart()), (short) Symbol.getColumn(_symbol_case_clause.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_case_clause.getEnd()), (short) Symbol.getColumn(_symbol_case_clause.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [12] case_clause_list = case_clause_list.case_clause_list COMMA.COMMA case_clause.case_clause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_case_clause_list = _symbols[offset + 1];
					final List case_clause_list = (List) _symbol_case_clause_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_case_clause = _symbols[offset + 3];
					final CaseClause case_clause = (CaseClause) _symbol_case_clause.value;
					 ASTNode _node_ = case_clause_list.add(case_clause);
      _node_.setStart(Symbol.getLine(_symbol_case_clause_list.getStart()), (short) Symbol.getColumn(_symbol_case_clause_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_case_clause.getEnd()), (short) Symbol.getColumn(_symbol_case_clause.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [13] receive_clause_list = receive_clause.receive_clause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_receive_clause = _symbols[offset + 1];
					final ReceiveClause receive_clause = (ReceiveClause) _symbol_receive_clause.value;
					 ASTNode _node_ = new List().add(receive_clause);
      _node_.setStart(Symbol.getLine(_symbol_receive_clause.getStart()), (short) Symbol.getColumn(_symbol_receive_clause.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_receive_clause.getEnd()), (short) Symbol.getColumn(_symbol_receive_clause.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [14] receive_clause_list = receive_clause_list.receive_clause_list COMMA.COMMA receive_clause.receive_clause
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_receive_clause_list = _symbols[offset + 1];
					final List receive_clause_list = (List) _symbol_receive_clause_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_receive_clause = _symbols[offset + 3];
					final ReceiveClause receive_clause = (ReceiveClause) _symbol_receive_clause.value;
					 ASTNode _node_ = receive_clause_list.add(receive_clause);
      _node_.setStart(Symbol.getLine(_symbol_receive_clause_list.getStart()), (short) Symbol.getColumn(_symbol_receive_clause_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_receive_clause.getEnd()), (short) Symbol.getColumn(_symbol_receive_clause.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [15] message = LCURLYBRACE.LCURLYBRACE TUPLE.TUPLE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET sender_id.recipient COMMA.COMMA__ atom.label COMMA.COMMA___ expression_list.expression_list RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol TUPLE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol _symbol_recipient = _symbols[offset + 7];
					final SenderId recipient = (SenderId) _symbol_recipient.value;
					final Symbol COMMA__ = _symbols[offset + 8];
					final Symbol _symbol_label = _symbols[offset + 9];
					final Atom label = (Atom) _symbol_label.value;
					final Symbol COMMA___ = _symbols[offset + 10];
					final Symbol _symbol_expression_list = _symbols[offset + 11];
					final List expression_list = (List) _symbol_expression_list.value;
					final Symbol RBRACKET = _symbols[offset + 12];
					final Symbol RCURLYBRACE = _symbols[offset + 13];
					 ASTNode _node_ = new Message(recipient, label, expression_list);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [16] message = LCURLYBRACE.LCURLYBRACE TUPLE.TUPLE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET sender_id.recipient COMMA.COMMA__ atom.label RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol TUPLE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol _symbol_recipient = _symbols[offset + 7];
					final SenderId recipient = (SenderId) _symbol_recipient.value;
					final Symbol COMMA__ = _symbols[offset + 8];
					final Symbol _symbol_label = _symbols[offset + 9];
					final Atom label = (Atom) _symbol_label.value;
					final Symbol RBRACKET = _symbols[offset + 10];
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					 ASTNode _node_ = new Message(recipient, label, new List());
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [17] process = LCURLYBRACE.LCURLYBRACE OPERATOR.OPERATOR COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ SINGLEMARKS.SINGLEMARKS SEND.SEND SINGLEMARKS.SINGLEMARKS_ COMMA.COMMA__ atom.dest COMMA.COMMA___ message.message RCURLYBRACE.RCURLYBRACE COMMA.COMMA____ process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol OPERATOR = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol SINGLEMARKS = _symbols[offset + 6];
					final Symbol SEND = _symbols[offset + 7];
					final Symbol SINGLEMARKS_ = _symbols[offset + 8];
					final Symbol COMMA__ = _symbols[offset + 9];
					final Symbol _symbol_dest = _symbols[offset + 10];
					final Atom dest = (Atom) _symbol_dest.value;
					final Symbol COMMA___ = _symbols[offset + 11];
					final Symbol _symbol_message = _symbols[offset + 12];
					final Message message = (Message) _symbol_message.value;
					final Symbol RCURLYBRACE = _symbols[offset + 13];
					final Symbol COMMA____ = _symbols[offset + 14];
					final Symbol _symbol_next = _symbols[offset + 15];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new Send(dest, message,next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [18] process = LCURLYBRACE.LCURLYBRACE OPERATOR.OPERATOR COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ SINGLEMARKS.SINGLEMARKS SEND.SEND SINGLEMARKS.SINGLEMARKS_ COMMA.COMMA__ atom.dest COMMA.COMMA___ message.message RCURLYBRACE.RCURLYBRACE process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol OPERATOR = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol SINGLEMARKS = _symbols[offset + 6];
					final Symbol SEND = _symbols[offset + 7];
					final Symbol SINGLEMARKS_ = _symbols[offset + 8];
					final Symbol COMMA__ = _symbols[offset + 9];
					final Symbol _symbol_dest = _symbols[offset + 10];
					final Atom dest = (Atom) _symbol_dest.value;
					final Symbol COMMA___ = _symbols[offset + 11];
					final Symbol _symbol_message = _symbols[offset + 12];
					final Message message = (Message) _symbol_message.value;
					final Symbol RCURLYBRACE = _symbols[offset + 13];
					final Symbol _symbol_next = _symbols[offset + 14];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new Send(dest, message,next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [19] process = LCURLYBRACE.LCURLYBRACE RECEIVE.RECEIVE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET receive_clause_list.clauses RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol RECEIVE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol _symbol_clauses = _symbols[offset + 7];
					final List clauses = (List) _symbol_clauses.value;
					final Symbol RBRACKET = _symbols[offset + 8];
					final Symbol RCURLYBRACE = _symbols[offset + 9];
					final Symbol _symbol_next = _symbols[offset + 10];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new Receive(clauses, next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [20] process = LCURLYBRACE.LCURLYBRACE RECEIVE.RECEIVE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LBRACKET.LBRACKET receive_clause_list.clauses RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE COMMA.COMMA__ process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol RECEIVE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LBRACKET = _symbols[offset + 6];
					final Symbol _symbol_clauses = _symbols[offset + 7];
					final List clauses = (List) _symbol_clauses.value;
					final Symbol RBRACKET = _symbols[offset + 8];
					final Symbol RCURLYBRACE = _symbols[offset + 9];
					final Symbol COMMA__ = _symbols[offset + 10];
					final Symbol _symbol_next = _symbols[offset + 11];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new Receive(clauses, next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [21] process = LCURLYBRACE.LCURLYBRACE CASE.CASE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ expression_list.matchingForm COMMA.COMMA__ LBRACKET.LBRACKET case_clause_list.clauses RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CASE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol _symbol_matchingForm = _symbols[offset + 6];
					final List matchingForm = (List) _symbol_matchingForm.value;
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol LBRACKET = _symbols[offset + 8];
					final Symbol _symbol_clauses = _symbols[offset + 9];
					final List clauses = (List) _symbol_clauses.value;
					final Symbol RBRACKET = _symbols[offset + 10];
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					final Symbol _symbol_next = _symbols[offset + 12];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new Case(matchingForm, clauses, next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [22] process = LCURLYBRACE.LCURLYBRACE CASE.CASE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ expression_list.matchingForm COMMA.COMMA__ LBRACKET.LBRACKET case_clause_list.clauses RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE COMMA.COMMA___ process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CASE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol _symbol_matchingForm = _symbols[offset + 6];
					final List matchingForm = (List) _symbol_matchingForm.value;
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol LBRACKET = _symbols[offset + 8];
					final Symbol _symbol_clauses = _symbols[offset + 9];
					final List clauses = (List) _symbol_clauses.value;
					final Symbol RBRACKET = _symbols[offset + 10];
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					final Symbol COMMA___ = _symbols[offset + 12];
					final Symbol _symbol_next = _symbols[offset + 13];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new Case(matchingForm, clauses, next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [23] process = LCURLYBRACE.LCURLYBRACE MATCH.MATCH COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ variable.left COMMA.COMMA__ expression.right RCURLYBRACE.RCURLYBRACE COMMA.COMMA___ process.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol MATCH = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol _symbol_left = _symbols[offset + 6];
					final Variable left = (Variable) _symbol_left.value;
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol _symbol_right = _symbols[offset + 8];
					final Expression right = (Expression) _symbol_right.value;
					final Symbol RCURLYBRACE = _symbols[offset + 9];
					final Symbol COMMA___ = _symbols[offset + 10];
					final Symbol _symbol_next = _symbols[offset + 11];
					final Process next = (Process) _symbol_next.value;
					 ASTNode _node_ = new Let(left, right, next);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [24] process = expression.expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 1];
					final Expression expression = (Expression) _symbol_expression.value;
					 ASTNode _node_ = new ExpressionProcess(expression, new Opt());
      _node_.setStart(Symbol.getLine(_symbol_expression.getStart()), (short) Symbol.getColumn(_symbol_expression.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_expression.getEnd()), (short) Symbol.getColumn(_symbol_expression.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [25] process = expression.expression process.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 1];
					final Expression expression = (Expression) _symbol_expression.value;
					final Symbol _symbol_next = _symbols[offset + 2];
					final Process next = (Process) _symbol_next.value;
					 ASTNode _node_ = new ExpressionProcess(expression, new Opt(next));
      _node_.setStart(Symbol.getLine(_symbol_expression.getStart()), (short) Symbol.getColumn(_symbol_expression.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [26] process = expression.expression COMMA.COMMA process_opt.next
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 1];
					final Expression expression = (Expression) _symbol_expression.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_next = _symbols[offset + 3];
					final Opt next = (Opt) _symbol_next.value;
					 ASTNode _node_ = new ExpressionProcess(expression, next);
      _node_.setStart(Symbol.getLine(_symbol_expression.getStart()), (short) Symbol.getColumn(_symbol_expression.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_next.getEnd()), (short) Symbol.getColumn(_symbol_next.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [27] expression = LCURLYBRACE.LCURLYBRACE OPERATOR.OPERATOR COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ SINGLEMARKS.SINGLEMARKS SYMBOL.sym SINGLEMARKS.SINGLEMARKS_ COMMA.COMMA__ expression.op1 COMMA.COMMA___ expression.op2 RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol OPERATOR = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol SINGLEMARKS = _symbols[offset + 6];
					final Symbol sym = _symbols[offset + 7];
					final Symbol SINGLEMARKS_ = _symbols[offset + 8];
					final Symbol COMMA__ = _symbols[offset + 9];
					final Symbol _symbol_op1 = _symbols[offset + 10];
					final Expression op1 = (Expression) _symbol_op1.value;
					final Symbol COMMA___ = _symbols[offset + 11];
					final Symbol _symbol_op2 = _symbols[offset + 12];
					final Expression op2 = (Expression) _symbol_op2.value;
					final Symbol RCURLYBRACE = _symbols[offset + 13];
					 ASTNode _node_ = new Operator(((String)sym.value),op1, op2);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [28] expression = LCURLYBRACE.LCURLYBRACE CALL.CALL COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ atom.method COMMA.COMMA__ LBRACKET.LBRACKET expression_list_opt.arguments RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CALL = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol _symbol_method = _symbols[offset + 6];
					final Atom method = (Atom) _symbol_method.value;
					final Symbol COMMA__ = _symbols[offset + 7];
					final Symbol LBRACKET = _symbols[offset + 8];
					final Symbol _symbol_arguments = _symbols[offset + 9];
					final List arguments = (List) _symbol_arguments.value;
					final Symbol RBRACKET = _symbols[offset + 10];
					final Symbol RCURLYBRACE = _symbols[offset + 11];
					 ASTNode _node_ = new Call(method, arguments);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [29] expression = LCURLYBRACE.LCURLYBRACE CALL.CALL COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LCURLYBRACE.LCURLYBRACE_ ATOM.ATOM COMMA.COMMA__ INTEGER.INTEGER_ COMMA.COMMA___ REGISTER.reg RCURLYBRACE.RCURLYBRACE COMMA.COMMA____ LBRACKET.LBRACKET expression_list.arguments RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE_
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CALL = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LCURLYBRACE_ = _symbols[offset + 6];
					final Symbol ATOM = _symbols[offset + 7];
					final Symbol COMMA__ = _symbols[offset + 8];
					final Symbol INTEGER_ = _symbols[offset + 9];
					final Symbol COMMA___ = _symbols[offset + 10];
					final Symbol reg = _symbols[offset + 11];
					final Symbol RCURLYBRACE = _symbols[offset + 12];
					final Symbol COMMA____ = _symbols[offset + 13];
					final Symbol LBRACKET = _symbols[offset + 14];
					final Symbol _symbol_arguments = _symbols[offset + 15];
					final List arguments = (List) _symbol_arguments.value;
					final Symbol RBRACKET = _symbols[offset + 16];
					final Symbol RCURLYBRACE_ = _symbols[offset + 17];
					 ASTNode _node_ = new Call(new Atom(((String)reg.value)), arguments);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE_.getEnd()), (short) Symbol.getColumn(RCURLYBRACE_.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [30] expression = LCURLYBRACE.LCURLYBRACE CALL.CALL COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ LCURLYBRACE.LCURLYBRACE_ ATOM.ATOM COMMA.COMMA__ INTEGER_.INTEGER_ COMMA.COMMA___ SELF.SELF RCURLYBRACE.RCURLYBRACE COMMA.COMMA____ LBRACKET.LBRACKET RBRACKET.RBRACKET RCURLYBRACE.RCURLYBRACE_
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol CALL = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol LCURLYBRACE_ = _symbols[offset + 6];
					final Symbol ATOM = _symbols[offset + 7];
					final Symbol COMMA__ = _symbols[offset + 8];
					final Symbol INTEGER_ = _symbols[offset + 9];
					final Symbol COMMA___ = _symbols[offset + 10];
					final Symbol SELF = _symbols[offset + 11];
					final Symbol RCURLYBRACE = _symbols[offset + 12];
					final Symbol COMMA____ = _symbols[offset + 13];
					final Symbol LBRACKET = _symbols[offset + 14];
					final Symbol RBRACKET = _symbols[offset + 15];
					final Symbol RCURLYBRACE_ = _symbols[offset + 16];
					 ASTNode _node_ = new Self();
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE_.getEnd()), (short) Symbol.getColumn(RCURLYBRACE_.getEnd()));
      return new Symbol(_node_);
				}
			},
			Action.RETURN,	// [31] expression = pattern.pattern
			new Action() {	// [32] expression_list = expression.expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression = _symbols[offset + 1];
					final Expression expression = (Expression) _symbol_expression.value;
					 ASTNode _node_ = new List().add(expression);
      _node_.setStart(Symbol.getLine(_symbol_expression.getStart()), (short) Symbol.getColumn(_symbol_expression.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_expression.getEnd()), (short) Symbol.getColumn(_symbol_expression.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [33] expression_list = expression_list.expression_list COMMA.COMMA expression.expression
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_expression_list = _symbols[offset + 1];
					final List expression_list = (List) _symbol_expression_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_expression = _symbols[offset + 3];
					final Expression expression = (Expression) _symbol_expression.value;
					 ASTNode _node_ = expression_list.add(expression);
      _node_.setStart(Symbol.getLine(_symbol_expression_list.getStart()), (short) Symbol.getColumn(_symbol_expression_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_expression.getEnd()), (short) Symbol.getColumn(_symbol_expression.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [34] variable_list = variable.variable
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_variable = _symbols[offset + 1];
					final Variable variable = (Variable) _symbol_variable.value;
					 ASTNode _node_ = new List().add(variable);
      _node_.setStart(Symbol.getLine(_symbol_variable.getStart()), (short) Symbol.getColumn(_symbol_variable.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_variable.getEnd()), (short) Symbol.getColumn(_symbol_variable.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [35] variable_list = variable_list.variable_list COMMA.COMMA variable.variable
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_variable_list = _symbols[offset + 1];
					final List variable_list = (List) _symbol_variable_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_variable = _symbols[offset + 3];
					final Variable variable = (Variable) _symbol_variable.value;
					 ASTNode _node_ = variable_list.add(variable);
      _node_.setStart(Symbol.getLine(_symbol_variable_list.getStart()), (short) Symbol.getColumn(_symbol_variable_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_variable.getEnd()), (short) Symbol.getColumn(_symbol_variable.getEnd()));
      return new Symbol(_node_);
				}
			},
			Action.RETURN,	// [36] pattern = litteral.litteral
			Action.RETURN,	// [37] pattern = variable.variable
			new Action() {	// [38] pattern_list = pattern.pattern
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_pattern = _symbols[offset + 1];
					final Pattern pattern = (Pattern) _symbol_pattern.value;
					 ASTNode _node_ = new List().add(pattern);
      _node_.setStart(Symbol.getLine(_symbol_pattern.getStart()), (short) Symbol.getColumn(_symbol_pattern.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_pattern.getEnd()), (short) Symbol.getColumn(_symbol_pattern.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [39] pattern_list = pattern_list.pattern_list COMMA.COMMA pattern.pattern
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_pattern_list = _symbols[offset + 1];
					final List pattern_list = (List) _symbol_pattern_list.value;
					final Symbol COMMA = _symbols[offset + 2];
					final Symbol _symbol_pattern = _symbols[offset + 3];
					final Pattern pattern = (Pattern) _symbol_pattern.value;
					 ASTNode _node_ = pattern_list.add(pattern);
      _node_.setStart(Symbol.getLine(_symbol_pattern_list.getStart()), (short) Symbol.getColumn(_symbol_pattern_list.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_pattern.getEnd()), (short) Symbol.getColumn(_symbol_pattern.getEnd()));
      return new Symbol(_node_);
				}
			},
			Action.RETURN,	// [40] litteral = atom.atom
			Action.RETURN,	// [41] litteral = pid.pid
			Action.RETURN,	// [42] litteral = number.number
			Action.RETURN,	// [43] litteral = charlist.charlist
			Action.RETURN,	// [44] litteral = boolean.boolean
			new Action() {	// [45] sender_id = variable.var
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_var = _symbols[offset + 1];
					final Variable var = (Variable) _symbol_var.value;
					 ASTNode _node_ = new VarSender(var.getIdent());
      _node_.setStart(Symbol.getLine(_symbol_var.getStart()), (short) Symbol.getColumn(_symbol_var.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_var.getEnd()), (short) Symbol.getColumn(_symbol_var.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [46] sender_id = atom.at
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_at = _symbols[offset + 1];
					final Atom at = (Atom) _symbol_at.value;
					 ASTNode _node_ = new AtomSender(at.getIdent());
      _node_.setStart(Symbol.getLine(_symbol_at.getStart()), (short) Symbol.getColumn(_symbol_at.getStart()));
      _node_.setEnd(Symbol.getLine(_symbol_at.getEnd()), (short) Symbol.getColumn(_symbol_at.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [47] number = LCURLYBRACE.LCURLYBRACE INTTYPE.INTTYPE COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ INTEGER.val RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol INTTYPE = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol val = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new Number(Integer.parseInt(((String)val.value)));
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [48] charlist = LCURLYBRACE.LCURLYBRACE STRING.STRING COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ STRINGVALUE.STRINGVALUE RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol STRING = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol STRINGVALUE = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new CharList(((String)STRINGVALUE.value));
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [49] boolean = LCURLYBRACE.LCURLYBRACE ATOM.ATOM COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ TRUE.TRUE RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol ATOM = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol TRUE = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new Boolean(true);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [50] boolean = LCURLYBRACE.LCURLYBRACE ATOM.ATOM COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ FALSE.FALSE RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol ATOM = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol FALSE = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new Boolean(false);
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [51] atom = LCURLYBRACE.LCURLYBRACE ATOM.ATOM COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ IDENTIFIER.i RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol ATOM = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol i = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new Atom(((String)i.value));
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [52] atom = LCURLYBRACE.LCURLYBRACE ATOM.ATOM COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ ATOMID.ATOMID RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol ATOM = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol ATOMID = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new Atom(((String)ATOMID.value));
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [53] pid = PID.mypid
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol mypid = _symbols[offset + 1];
					 ASTNode _node_ = new Pid(((String)mypid.value));
      _node_.setStart(Symbol.getLine(mypid.getStart()), (short) Symbol.getColumn(mypid.getStart()));
      _node_.setEnd(Symbol.getLine(mypid.getEnd()), (short) Symbol.getColumn(mypid.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [54] variable = LCURLYBRACE.LCURLYBRACE VAR.VAR COMMA.COMMA INTEGER.INTEGER COMMA.COMMA_ VARIABLEID.VARIABLEID RCURLYBRACE.RCURLYBRACE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol LCURLYBRACE = _symbols[offset + 1];
					final Symbol VAR = _symbols[offset + 2];
					final Symbol COMMA = _symbols[offset + 3];
					final Symbol INTEGER = _symbols[offset + 4];
					final Symbol COMMA_ = _symbols[offset + 5];
					final Symbol VARIABLEID = _symbols[offset + 6];
					final Symbol RCURLYBRACE = _symbols[offset + 7];
					 ASTNode _node_ = new Variable(((String)VARIABLEID.value).replace("'",""));
      _node_.setStart(Symbol.getLine(LCURLYBRACE.getStart()), (short) Symbol.getColumn(LCURLYBRACE.getStart()));
      _node_.setEnd(Symbol.getLine(RCURLYBRACE.getEnd()), (short) Symbol.getColumn(RCURLYBRACE.getEnd()));
      return new Symbol(_node_);
				}
			},
			new Action() {	// [55] process_opt = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Symbol(new Opt());
				}
			},
			new Action() {	// [56] process_opt = process.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Process n = (Process) _symbol_n.value;
					 ASTNode _node_ = new Opt(n);
   _node_.setStart(Symbol.getLine(_symbol_n.getStart()), (short) Symbol.getColumn(_symbol_n.getStart()));
   _node_.setEnd(Symbol.getLine(_symbol_n.getEnd()), (short) Symbol.getColumn(_symbol_n.getEnd()));
   return new Symbol(_node_);
				}
			},
			new Action() {	// [57] expression_list_opt = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Symbol(new List());
				}
			},
			new Action() {	// [58] expression_list_opt = expression_list.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 ASTNode _node_ = n;
   _node_.setStart(Symbol.getLine(_symbol_n.getStart()), (short) Symbol.getColumn(_symbol_n.getStart()));
   _node_.setEnd(Symbol.getLine(_symbol_n.getEnd()), (short) Symbol.getColumn(_symbol_n.getEnd()));
   return new Symbol(_node_);
				}
			},
			new Action() {	// [59] variable_list_opt = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Symbol(new List());
				}
			},
			new Action() {	// [60] variable_list_opt = variable_list.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 ASTNode _node_ = n;
   _node_.setStart(Symbol.getLine(_symbol_n.getStart()), (short) Symbol.getColumn(_symbol_n.getStart()));
   _node_.setEnd(Symbol.getLine(_symbol_n.getEnd()), (short) Symbol.getColumn(_symbol_n.getEnd()));
   return new Symbol(_node_);
				}
			},
			new Action() {	// [61] pattern_list_opt = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new Symbol(new List());
				}
			},
			new Action() {	// [62] pattern_list_opt = pattern_list.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final List n = (List) _symbol_n.value;
					 ASTNode _node_ = n;
   _node_.setStart(Symbol.getLine(_symbol_n.getStart()), (short) Symbol.getColumn(_symbol_n.getStart()));
   _node_.setEnd(Symbol.getLine(_symbol_n.getEnd()), (short) Symbol.getColumn(_symbol_n.getEnd()));
   return new Symbol(_node_);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
