aspect TypeChecking{

    public boolean Program.checkType(){
        boolean verified = true;
        for (Module module: getModuless()){
            System.out.println(module.getPartecipant() + " checking");
            verified = verified && module.checkActor(null);
        }
        return verified;
    }

    public boolean Program.checkType(String actor, FunType type1){
        boolean verified = true;
        for (Module module: getModuless()){
            if(actor.equals(module.getPartecipant())){
                System.out.println(module.getPartecipant() + " checking");
                verified = verified && module.checkActor(type1);
            }
        }
        return verified;
    }

    public boolean Module.checkActor(FunType type1){
        boolean verified = true;
        for (Function function : getFunctionss()){
            if(type1==null)
                type1 = function.getType();
            if(function.getFunctionName().equals("init")){
                verified = verified && Program.check(type1, function, true);
                System.out.println("inferred type is a subtype of the projected type: " + verified);
                System.out.println();
            }else{
                verified = verified && Program.check(function.getType(), function);
            }
        }
        System.out.println();
        return verified;
    }

    static boolean Program.check(FunType type1, Function function) {
        return Program.check(type1,function, false);
    }

    static boolean Program.check(FunType type1, Function function, boolean printLog) {
        Session t = function.getInferredType();
        FunType type2 = new FunType(function.getFunctionName(), function.getType().getArgumentss(),t);
        if(printLog){
           type1.stampante().reset();
           type1.stampa();
           System.out.println("Projected session type: " + type1.stampante().getString());
           type2.stampante().reset();
           type2.stampa();
           System.out.println("Inferred session type: " + type2.stampante().getString());
        }
        return type1.compareWith(type2);
    }

    public static void Program.printLiteral(PrettyPrinter p, LiteralType l){
         if(l.getClass().equals(StringType.class))
             p.append("String");
         else if(l.getClass().equals(IntType.class))
             p.append("Int");
         else if(l.getClass().equals(AtomType.class))
             p.append("Atom");
    }
}