aspect SendSubtyping{

    public static boolean Program.checkSendLists(List<SessionSend> l1, List<SessionSend> l2){
         Map<String, Integer> freq1 = new HashMap();
         l1.forEach(it -> freq1.merge(it.getKey(), 1, (a, b) -> a + b));
         Map<String, Integer> freq2 = new HashMap();
         l2.forEach(it -> freq2.merge(it.getKey(), 1, (a, b) -> a + b));
         return freq1.equals(freq2);
    }

    public List<SessionSend> SessionSend.getNextSendList(){
        return getNextSendList(new List());
    }

    public List<SessionSend> SessionSend.getNextSendList(List<SessionSend> list){
        list.add(this);
        if(getNext().isSubtypeOf(new SessionSend())){
            return ((SessionSend)getNext()).getNextSendList(list);
        }else{
            return list;
        }
    }

    public String SessionSend.getKey(){
        String s = getSender().getIdent()+getLabel().getIdent();
        for(LiteralType ss : getTypes()){
            s += ss.toString();
        }
        return s;
    }

    public boolean ConnectingSend.subtype(Object other){
        return super.subtype(other);
    }

    public boolean SessionSend.subtype(Object other){
        if(((Session)other).isSubtypeOf(new SessionSend())){
            SessionSend send = (SessionSend) other;
            if(getSender().equals(send.getSender()) && getLabel().equals(send.getLabel())){
                boolean list = Program.checkListsByClassName(getTypes(), send.getTypes());
                if(list && getNext().subtype(send.getNext())){
                    return true;
                }
            }

            List<SessionSend> list1 = getNextSendList();
            List<SessionSend> list2 = send.getNextSendList();
            Session s1 = list1.getChild(list1.getNumChild()-1).getNext();
            Session s2 = list2.getChild(list2.getNumChild()-1).getNext();
            return Program.checkSendLists(list1, list2) && ((s1==null && s2==null) || s1.subtype(s2));
        }
        return false;
    }

}