/*  Abstract syntax for two buyer in erlang */

abstract Goal;
Program:Goal ::= Modules:Module*;

Module::= <Partecipant:String> <RegisteredName:String> <ModuleName:String> <FunName:String> Functions:Function*;

Function ::= [Type:FunType] <FunctionName:String> Parameters:Variable* Body:Process;  /* funType di tipo funType */
Anno ::= <Line:Integer> <StartToken:Integer>;
Message ::= Sender:SenderId Label:Atom Payload:Expression*;

ReceiveClause ::= Sender:Atom Label:Atom Variables:Pattern* Actions:Process;
CaseClause ::= Patterns:Pattern* Actions:Process;

abstract Process;
Send:Process ::= Recipient:Atom Message:Message Next:Process;
Register:Process ::= Arguments:Expression* Next:Process;
Unregister:Process ::= Arguments:Expression* Next:Process;
Receive:Process ::= Clauses:ReceiveClause* [Next:Process];
Case:Process ::= Matching:Expression* Clauses:CaseClause* [Next:Process];
Let:Process ::= Left:Variable Right:Expression Next:Process;
ExpressionProcess:Process ::= Expression:Expression;

/*  expressions  */
abstract Expression;
Operator:Expression ::= <OperatorSymbol:String> LeftOp:Expression RightOp:Expression;
Call:Expression ::= FunctionName:Atom Arguments:Expression*;
Self:Expression;

/*  literals  */
abstract Pattern:Expression;
abstract Literal:Pattern;
Atom:Literal ::= <Ident:String>;
Pid:Literal::= <Pid:String>;
CharList:Literal ::= <StringValue:String>;
Number:Literal ::= <IntegerValue:Integer>;
Boolean:Literal ::= <BooleanValue:boolean>;

Variable:Pattern::= <Ident:String>;

SenderId;
AtomSender:SenderId ::= <Ident:String>;
VarSender:SenderId ::= <Ident:String>;



