/*  Abstract syntax for two buyer in erlang */

Program ::= Modules:Module*;
Module::= <Partecipant:String> Functions:Function*;

Actor ::= <ActorName:String>;
Type ::= <Type:String>;
Function ::= <FunctionName:String> <ArgumentsNumber:Integer> Expressions:Pattern*;


abstract Production;
Send:Production ::= Recipient:Atom Message:Message;
Receive:Production ::= Patterns:Clause*;
Case:Production ::= MatchingForm:Expression* Patterns:Clause*;
Let:Production ::= LeftForm:Variable RightForm:Expression;

Register:Production ::= Name:Atom MyPid:Pid;
Unregister:Production ::= Name:Atom;

Clause::= PatternVar:Pattern* GuardValues:Match* Forms:Production*;

Message ::= Sender:Identifier Recipient:Atom Payload:Expression*;

/*  expressions  */
abstract Expression:Production;
Pattern:Expression;
Operator:Expression ::= <OperatorSymbol:String> LeftOp:Expression RightOp:Expression;
Call:Expression ::= FunctionName:Atom Arguments:Expression*;


/*  litterals  */
abstract Litteral:Pattern;
Pid:Litteral::= <Pid:String>;
CharList:Litteral ::= <StringValue:String>;
Number:Litteral ::= <IntegerValue:Integer>;
Boolean:Litteral ::= <BooleanValue:Boolean>;

abstract Identifier:Value;
Variable:Identifier::= <Ident:String>;
Atom:Identifier::= <AtomValue:String>;
