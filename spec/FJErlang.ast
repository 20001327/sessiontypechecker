/*  Abstract syntax for two buyer in erlang */

Program ::= Modules:Module*;
Module::= Functions:Function*;

Actor ::= <ActorName:String>;
Type ::= <Type:String>;
Function ::= <FunctionName:String> <ArgumentsNumber:Integer> Expressions:Pattern*;


abstract Form;
Register:Form ::= Name:Atom MyPid:Pid;
Unregister:Form ::= Name:Atom;
Call:Form ::= FunctionName:Atom Arguments:Value*;
Match:Form ::= LeftForm:Variable RightForm:Value;
Case ::= MatchingForm:Form Patterns:Pattern*;
Receive:Form ::= Patterns:Clause*;
Send:Form ::= LeftOp:Value RightOp:Tuple;
Operator:Form ::= <OperatorSymbol:String> LeftOp:Value RightOp:Value;

Clause:Form::= PatternVar:Value* GuardValues:Match* Forms:Form*;

abstract Pattern;

Tuple:Pattern ::= Fields:Value*;

abstract Value:Pattern;
Identifier:Value::= <MyId:Identificatore>;
Atom:Value::= <AtomValue:String>;
CharList:Value ::= <StringValue:String>;
Number:Value ::= <IntegerValue:Integer>;

abstract Identificatore;
Variable:Identificatore::= <Ident:String>;
Pid:Identificatore::= <Pid:String>;