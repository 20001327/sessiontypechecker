/*  Abstract syntax for two buyer in erlang */

Program ::= Modules:Module*;
Module::= Functions:Function*;

abstract Form ::= <FormType:String> <RowNumber:Integer>;

Function:Form ::= <FunctionName:String> <ArgumentsNumber:Integer> Arguments:Pattern* Expressions:Form*;

Attribute:Form ::= <AttribType:String> <AttribValue:String>;
Register:Form ::= Name:Atom MyPid:Pid;
Unregister:Form ::= Name:Atom;
Spawn:Form ::= Module:Atom Method:Atom Arguments:Variable*;
Call:Form ::= [Library:Atom] FunctionName:Atom Arguments:Value*;
Match:Form ::= LeftForm:Variable RightForm:Form;
Case ::= Patterns:Pattern* Expressions:Form*;
Receive:Form ::= Patterns:Pattern* Expressions:Form*;
Operator:Form ::= <OperatorSymbol:String> LeftOp:Value RightOp:Variable;

abstract Clause:Form;
Pattern:Form::= PatternVar:Variable* [GuardValues:Value*];

abstract Message;
Tuple:Message ::= <FormType:String> <RowNumber:Integer> Fields:Value*;

abstract Value;
Identifier:Value::= <Identif:Ident>;
Atom:Value::= <FormType:String> <RowNumber:Integer> <AtomValue:String>;
StringForm:Value ::= <FormType:String> <RowNumber:Integer> <StringValue:String>;

abstract Ident;
Variable:Ident::= <Id:String>;
Pid:Ident::= <Pid:Integer>




