/*  Abstract syntax for two buyer in erlang */

Program ::= Modules:Module*;
Module::= Functions:Function*;

/* da rivedere */
Function ::= <FunctionName:String> <ArgumentsNumber:Integer> Expressions:Pattern*;
/* */

abstract Form;
Attribute:Form ::= <AttribType:String> <AttribValue:String>;
Register:Form ::= Name:Atom MyPid:Pid;
Unregister:Form ::= Name:Atom;
Spawn:Form ::= Module:Atom Method:Atom Arguments:Variable*;
Call:Form ::= FunctionName:Atom Arguments:Value*;
Match:Form ::= LeftForm:Variable RightForm:Form;
Case ::= MatchingForm:Form Patterns:Pattern*;
Receive:Form ::= Patterns:Pattern*;
Send:Form ::= LeftOp:Value RightOp:Message;
Operator:Form ::= <OperatorSymbol:String> LeftOp:Value RightOp:Value;

abstract Pattern:Form;
Clause:Form::= PatternVar:Variable* GuardValues:Match* Forms:Form*;

abstract Message;
Tuple:Message ::= <FormType:String> <RowNumber:Integer> Fields:Value*;

abstract Value;
Identifier:Value::= <MyId:Identificatore>;
Atom:Value::= <AtomValue:String>;
CharList:Value ::= <StringValue:String>;
Number:Value ::= <IntegerValue:Integer>;

abstract Identificatore;
Variable:Identificatore::= <Ident:String>;
Pid:Identificatore::= <Pid:Integer>;