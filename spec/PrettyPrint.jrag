import miniErlang.Expression;

// Sie m√ºssen ggf. diese Datei an ihre minijava.ast anpassen
aspect PrettyPrint {
    public class PrettyPrinter {
        public static String INDENT = "  ";
        private StringBuilder sb;

        public PrettyPrinter() {
            sb = new StringBuilder();
        }

        public void append(String s) {
            sb.append(s);
        }

        public String getString() {
            return sb.toString();
        }

        public void reset() {
            sb.setLength(0);
        }
    }

    //similar to JastAdd Java compiler
    syn String ASTNode.indent()
    {
        String indent = extractIndent();
        return indent.startsWith("\n") ? indent : ("\n" + indent);
    }

    syn String ASTNode.extractIndent()
    {
        if (getParent() == null)
            return "";
        String indent = getParent().extractIndent();

        if (getParent().addsIndentationLevel())
            indent += PrettyPrinter.INDENT;
        return indent;
    }

    syn boolean ASTNode.addsIndentationLevel() =false;
    eq Program.addsIndentationLevel()=false;
    eq Module.addsIndentationLevel()=false;
    eq Function.addsIndentationLevel()=true;
    eq Process.addsIndentationLevel()=false;
    eq ReceiveClause.addsIndentationLevel()=true;
    eq CaseClause.addsIndentationLevel()=true;
    eq ExpressionProcess.addsIndentationLevel()=true;

    syn lazy PrettyPrinter Program.printer() {
        return new PrettyPrinter();
    }

    syn lazy PrettyPrinter FunctionType.stampante() {
        return new PrettyPrinter();
    }
    eq FunctionType.getArguments().stampante() = this.stampante();
    eq FunctionType.getSessionType().stampante() = this.stampante();
    inh lazy PrettyPrinter Session.stampante();
    inh lazy PrettyPrinter Atom.stampante();

    eq Program.getModules().printer() = this.printer();
    eq Module.getFunctions().printer() = this.printer();
    eq Function.getBody().printer() = this.printer();
    eq Function.getType().printer() = this.printer();
    eq FunType.getArguments().printer() = this.printer();
    eq FunType.getSessionType().printer() = this.printer();
    eq Receive.getNext().printer() = this.printer();
    eq Send.getNext().printer() = this.printer();
    eq Send.getRecipient().printer() = this.printer();
    eq Send.getMessage().printer() = this.printer();
    eq Message.getSender().printer() = this.printer();
    eq Message.getPayload().printer() = this.printer();
    eq Receive.getClauses().printer() = this.printer();
    eq Case.getClauses().printer() = this.printer();
    eq ReceiveClause.getActions().printer() = this.printer();
    eq Let.getNext().printer() = this.printer();

    inh lazy PrettyPrinter Module.printer();
    inh lazy PrettyPrinter Function.printer();
    inh lazy PrettyPrinter FunType.printer();
    inh lazy PrettyPrinter Process.printer();
    inh lazy PrettyPrinter Expression.printer();
    inh lazy PrettyPrinter Session.printer();
    inh lazy PrettyPrinter Message.printer();
    inh lazy PrettyPrinter ReceiveClause.printer();
    inh lazy PrettyPrinter CaseClause.printer();
    inh lazy PrettyPrinter SenderId.printer();
    inh lazy PrettyPrinter Atom.printer();

    syn PrettyPrinter Program.print()
    {
        printer().reset();
        for (Module module : getModuless()) module.print();
        return printer();
    }

    public void Module.print() {
        printer().append("-module(" + getPartecipant() + "). \n");
        printer().append("-export([start/0,");
        for (int i=0; i<getFunctionss().getNumChild(); i++) {
            Function f = getFunctions(i);
            printer().append(f.getFunctionName() + "/");
            printer().append(f.getNumParameters() + "");
            if(i<getFunctionss().getNumChild()-1){
                printer().append(",");
            }
        }
        printer().append("]).\n");

        printer().append("start() -> register(" + getRegisteredName() +
                        ",spawn("+ getModuleName() +", " + getFunName() + ", []);");


        for (Function f : getFunctionss()) {
            f.print();
        }

    }

    public void Function.print() {

        if(hasType()){
            getType().print();
        }

        printer().append("\n" + getFunctionName() + "(");
        for (int i=0; i<getNumParameters(); i++) {
            Variable var = getParameters(i);
            printer().append(var.getIdent());
            if(i<getNumParameters()-1){
                printer().append(",");
            }
        }
        printer().append(")->");
        getBody().print();
        printer().append(".");
    }

    public void FunType.print(){
       printer().append("\n");
       printer().append("-type " + getFunName() + "(");
       for (int i=0; i<getNumArguments(); i++) {
           LiteralType var = getArguments(i);
           printer().append(var.getClass().getName());
           if(i<getNumArguments()-1){
               printer().append(",");
           }
       }
       printer().append(") :: '");
       getSessionType().print();
       printer().append("'");
    }

    public void SessionSend.print(){
        getSender().print();
        printer().append("!");
        getLabel().print();
        if(getNumType()>0){
            printer().append("<");
            for (int i=0; i<getNumType(); i++) {
                getType(i).print();
                if(i<getNumType()-1){
                    printer().append(",");
                }
            }
            printer().append(">");
        }
        printer().append(".");
        getNext().print();
    }

    public void SessionReceive.print(){
        getRecipient().print();
        printer().append("?");
        getLabel().print();
        if(getNumType()>0){
        printer().append("<");
            for (int i=0; i<getNumType(); i++) {
                getType(i).print();
                if(i<getNumType()-1){
                    printer().append(",");
                }
            }
        printer().append(">");
        }
        printer().append(".");
        getNext().print();
    }

    public void InternalChoice.print(){
        printer().append("@(");
        if(getNumSends()>0){
            for (int i=0; i<getNumSends(); i++) {
                getSends(i).print();
                if(i<getNumSends()-1){
                    printer().append(",");
                }
            }
        }
        printer().append(")");
    }

    public void ExternalChoice.print(){
        printer().append("&(");
        if(getNumReceives()>0){
            for (int i=0; i<getNumReceives(); i++) {
                getReceives(i).print();
                if(i<getNumReceives()-1){
                    printer().append(",");
                }
            }
        }
        printer().append(")");
    }

    public void RequestForwardDelegation.print(){
        printer().append("<<");
        getDelegating().print();
        printer().append(".");
        getNext().print();
    }

    public void RequestBackwardDelegation.print(){
        printer().append(">>");
        getDelegating().print();
        printer().append(".");
        getNext().print();
    }

    public void AcceptForwardDelegation.print(){
        getDelegate().print();
        printer().append("<<");
        printer().append(".");
        getNext().print();
    }

    public void AcceptBackwardDelegation.print(){
        getDelegate().print();
        printer().append(">>");
        printer().append(".");
        getNext().print();
    }

    public void End.print(){
       printer().append("End");
    }

    public void AtomType.print(){
        printer().append("Atom");
    }
    public void IntType.print(){
        printer().append("Int");
    }
    public void StringType.print(){
        printer().append("String");
    }


    public void Send.print() {
        printer().append(indent());
        getRecipient().print();
        printer().append("!");
        getMessage().print();
        if(hasNext()){
            printer().append(",");
            getNext().print();
        }
    }

    public void Operator.print() {
        getLeftOp().print();
        printer().append(getOperatorSymbol().replace("'",""));
        getRightOp().print();
    }

    public void Message.print() {
        printer().append("{");
        getSender().print();
        printer().append(",");
        getLabel().print();
        if(getNumPayload()>0){
            printer().append(",");
        }
        for(int i=0;i<getNumPayload();i++){
            getPayload(i).print();
            if(i<getNumPayload()-1){
                printer().append(",");
            }
        }
        printer().append("}");
    }

    public void Atom.print() {
        printer().append(getIdent());
    }

    public void CharList.print() {
        printer().append(getStringValue());
    }

    public void SenderId.print() {
        printer().append("");
    }

    public void Receive.print() {
        printer().append(indent());
        printer().append("receive");
        for(int i=0; i<getNumClauses();i++){
            getClauses(i).print();
            if(i<getNumClauses()-1){
                printer().append(";");
            }
        }
        printer().append(indent() + "end");
        if(hasNext()){
            printer().append(",");
            getNext().print();
        }
    }

    public void Case.print() {
        printer().append(indent());
        printer().append("case ");
        for(int i=0; i<getNumMatching();i++){
            getMatching(i).print();
            if(i<getNumMatching()-1){
                printer().append(",");
            }
        }
        printer().append(" of ");
        for(int i=0; i<getNumClauses();i++){
            getClauses(i).print();
            if(i<getNumClauses()-1){
                printer().append(";");
            }
        }
        printer().append(indent() + "end");
        if(hasNext()){
            printer().append(",");
            getNext().print();
        }
    }

    public void ReceiveClause.print(){
       printer().append(indent() + PrettyPrinter.INDENT);
       printer().append("{");
       getSender().print();
       printer().append(",");
       getLabel().print();
       if(getNumVariables()>0)
            printer().append(",");
       for(int i=0; i<getNumVariables();i++){
            getVariables(i).print();
            if(i<getNumVariables()-1){
                printer().append(",");
            }
       }
       printer().append("}->");
       getActions().print();
    }

    public void CaseClause.print(){
       printer().append(indent() + PrettyPrinter.INDENT);
       for(int i=0; i<getNumPatterns();i++){
            getPatterns(i).print();
            if(i<getNumPatterns()-1){
                printer().append(",");
            }
       }
       printer().append(" -> ");
       getActions().print();
    }

    public void Let.print(){
        printer().append(indent());
        getLeft().print();
        printer().append("=");
        getRight().print();
        printer().append(",");
        getNext().print();
    }

    public void Call.print(){
        getFunctionName().print();
        printer().append("(");
       for(int i=0; i<getNumArguments();i++){
            getArguments(i).print();
            if(i<getNumArguments()-1){
                printer().append(",");
            }
       }
       printer().append(")");
    }

    public void AtomSender.print(){
       printer().append(getIdent());
    }

    public void VarSender.print(){
       printer().append(getIdent());
    }

    public void Variable.print(){
       printer().append(getIdent());
    }

    public void Number.print(){
       printer().append(getIntegerValue() + "");
    }

    public void Boolean.print(){
       printer().append(getBooleanValue() ? "true" : "false");
    }

    public void Expression.print(){
       printer().append("exp");
    }

    public void ExpressionProcess.print(){
       printer().append(indent());
       getExpression().print();
       if(hasNext()){
           printer().append(",");
           getNext().print();
       }
    }

    public void Process.print() {
        printer().append("process");
    }

    public void Session.print(){
       printer().append("session");
    }

    public void Session.stampa(){
       stampante().append("session");
    }

    syn PrettyPrinter FunctionType.stampa(){
       stampante().append("\n");
       stampante().append("-type " + getFunName() + "(");
       for (int i=0; i<getNumArguments(); i++) {
           LiteralType var = getArguments(i);
           stampante().append(var.getClass().getName());
           if(i<getNumArguments()-1){
               stampante().append(",");
           }
       }
       stampante().append(") :: '");
       getSessionType().stampa();
       stampante().append("'");
       return stampante();
    }

    public void SessionSend.stampa(){
        getSender().stampa();
        stampante().append("!");
        getLabel().stampa();
        if(getNumType()>0){
            stampante().append("<");
            for (int i=0; i<getNumType(); i++) {
                getType(i).stampa();
                if(i<getNumType()-1){
                    stampante().append(",");
                }
            }
            stampante().append(">");
        }
        stampante().append(".");
        if(getNext()!=null)getNext().stampa();
    }

    public void SessionReceive.stampa(){
        getRecipient().stampa();
        stampante().append("?");
        getLabel().stampa();
        if(getNumType()>0){
        stampante().append("<");
            for (int i=0; i<getNumType(); i++) {
                getType(i).stampa();
                if(i<getNumType()-1){
                    stampante().append(",");
                }
            }
        stampante().append(">");
        }
        stampante().append(".");
        if(getNext()!=null)getNext().stampa();
    }

    public void InternalChoice.stampa(){
        stampante().append("@(");
        if(getNumSends()>0){
            for (int i=0; i<getNumSends(); i++) {
                getSends(i).stampa();
                if(i<getNumSends()-1){
                    stampante().append(",");
                }
            }
        }
        stampante().append(")");
    }

    public void ExternalChoice.stampa(){
        stampante().append("&(");
        if(getNumReceives()>0){
            for (int i=0; i<getNumReceives(); i++) {
                getReceives(i).stampa();
                if(i<getNumReceives()-1){
                    stampante().append(",");
                }
            }
        }
        stampante().append(")");
    }

    public void RequestForwardDelegation.stampa(){
        stampante().append("<<");
        getDelegating().stampa();
        stampante().append(".");
        getNext().stampa();
    }

    public void RequestBackwardDelegation.stampa(){
        getDelegating().stampa();
        stampante().append(">>");
        stampante().append(".");
        getNext().stampa();
    }

    public void AcceptForwardDelegation.stampa(){
        getDelegate().stampa();
        stampante().append("<<");
        stampante().append(".");
        getNext().stampa();
    }

    public void AcceptBackwardDelegation.stampa(){
        stampante().append(">>");
        getDelegate().stampa();
        stampante().append(".");
        if(getNext()!=null)getNext().stampa();
    }

    public void End.stampa(){
       stampante().append("End");
    }

    public void AtomType.stampa(){
        stampante().append("Atom");
    }
    public void IntType.stampa(){
        stampante().append("Int");
    }
    public void StringType.stampa(){
        stampante().append("String");
    }
    public void Atom.stampa() {
        stampante().append(getIdent());
    }

}