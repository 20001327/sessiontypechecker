/*  Abstract syntax for two buyer in erlang */

Program ::= Modules:Module*;
Module::= Functions:Function*;

abstract Form ::= <FormType:String> <RowNumber:Integer>;

Cons:Form ::= Head:Form [Tail:Form];
Function:Form ::= <FunctionName:String> <ArgumentsNumber:Integer> Arguments:Pattern* Expressions:Form*;
Receive:Form ::= Patterns:Pattern* Expressions:Form*;
Case ::= Patterns:Pattern* Expressions:Form*;
If:Form ::=  Patterns:Guard* Expressions:Form*;
Call:Form ::= [Library:Identifier] FunctionName:Identifier Arguments:Value*;
Match:Form ::= LeftForm:Variable RightForm:Form; /* assign/compare */
Operator:Form ::= <OperatorSymbol:String> LeftOp:Value RightOp:Variable;

abstract Clause:Form;
Pattern:Form::= PatternVar:Variable* [GuardValues:Value*];
Guard:Form::= PatternVar:Variable* GuardValues:Value*;

Message:Form;

Record:Message ::= RecordName:Identifier Fields:RecordField*;
Tuple:Message ::= Fields:Value*;

RecordField:Form ::= RecordName:Atom RecordValue:Value;

abstract Value;
Identifier:Value::= <Identif:Ident>;
Atom:Value::= <FormType:String> <RowNumber:Integer> <AtomValue:String>;
StringForm:Value ::= <FormType:String> <RowNumber:Integer> <StringValue:String>;
Nil:Value;

abstract Ident;
Variable:Ident::= <Id:String>;
Pid:Ident::= <Pid:Integer>




