
%header {:
	/* This code is inlined before the generated parser */
	package miniErlang;
:};

%embed {:
	/* This code is inlined in the generated parser class */
:};

/* Just to shut up Beaver warnings */
%goal goal;

global goal =
    global.g {: return g; :};

Global global =
    communication
|   LQUAD communication_list.clist RQUAD
    {: return new CommunicationChoices(clist); :}
|   IDENTIFIER.delegating OPENANGULAR OPENANGULAR IDENTIFIER.delegate
    {: return new StartDelegation(delegating, delegate); :}
|   IDENTIFIER.delegating CLOSEANGULAR CLOSEANGULAR IDENTIFIER.delegate
    {: return new EndDelegation(delegating, delegate); :}
|   terminal
;

Communication communication =
    IDENTIFIER.sender MINUS CLOSEANGULAR IDENTIFIER.receiver COLONS IDENTIFIER.label OPENANGULAR literal_type_list.l CLOSEANGULAR
    {: return new Communication(sender, receiver, label, l); :};

CommunicationChoice communication_choice =
    communication.c DOT global.next
    {: return new CommunicationChoice(c, next); :}
;

List communication_list =
    communication_choice.c                           {:  return new List().add(c);  :}
|   communication_list COMMA communication_choice.c  {:  return communication_list.add(c);  :}
;

Terminal terminal =
    end_global;

EndGlobal end_global =
  END          {: return new EndGlobal(); :};

LiteralType literaltype =
    STRINGTYPE  {: return new StringType(); :}
|    INTTYPE     {: return new IntType(); :}
|    ATOMTYPE    {: return new AtomType(); :}
;

List literal_type_list =
    literaltype                             {: return new List(literaltype); :}
|   literal_type_list COMMA literaltype     {: return literal_type_list.add(literaltype); :}
;