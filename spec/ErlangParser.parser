%header {:
	/* This code is inlined before the generated parser */
	package miniErlang;
:};

%embed {:
	/* This code is inlined in the generated parser class */
:};

/* Just to shut up Beaver warnings */
%goal goal;

/* Productions with semantic actions building the JastAdd AST */

program goal =
	module_list 	    	    {: return new Program(module_list); :}
;

Module module =
    function_list           {: return new Module(function_list); :}
;

List module_list =
    module                  {: return new List().add(module); :}
|   module_list module      {: return module_list.add(module); :}
;

List function_list =
	function		        {: return new List().add(function);	:}
|	function_list function	{: return function_list.add(function); :}
;



Function function =
LCURLYBRACE FUNCTION COMMA INTEGER.rowNumber COMMA IDENTIFIER.funName COMMA INTEGER.numArguments COMMA clause_list.patterns RCURLYBRACE
     {: return new Function(funName, Integer.parseInt(numArguments), patterns); :}
;

Form form =
    match
|   LCURLYBRACE OPERATOR COMMA INTEGER.rowNumber COMMA SEND COMMA value.dest COMMA tuple.message RCURLYBRACE
        {: return new Send(dest, tuple); :}
|   LCURLYBRACE OPERATOR COMMA INTEGER.rowNumber COMMA MINUS COMMA value.op1 COMMA value.op2 RCURLYBRACE
        {: return new Difference(op1, op2); :}
|   LCURLYBRACE OPERATOR COMMA INTEGER.rowNumber COMMA DIVISION COMMA value.op1 COMMA value.op2 RCURLYBRACE
        {: return new Division(op1, op2); :}
|	LCURLYBRACE SINGLEMARKS RECEIVE SINGLEMARKS COMMA INTEGER.rowNumber COMMA clause_list.clauses RCURLYBRACE
 		{: return new Receive(clauses); :}
|   LCURLYBRACE CASE COMMA INTEGER.rowNumber COMMA form.matchingForm COMMA clause_list.clauses RCURLYBRACE
        {: return new Case(matchingForm, clauses); :}
|   LCURLYBRACE CALL COMMA INTEGER.rowNumber COMMA atom.method COMMA value_list.arguments RCURLYBRACE
        {: return new Call(CALL, rowNumber, method, arguments); :}
|   LCURLYBRACE CALL COMMA INTEGER.rowNumber COMMA atom.library COMMA atom.method COMMA value_list.arguments RCURLYBRACE
        {: return new Call(CALL, rowNumber, library, method, arguments); :}
;

List form_list =
    form                    {: return new List().add(form);     :}
|   form_list form          {: return form_list.add(form);      :}
;

List match_list =
    LBRACKET RBRACKET       {: return new List(); :}
|	match   		        {: return new List().add(match);	:}
|	match_list match    	{: return function_list.add(match); :}
 ;

List clause_list =
	clause   		        {: return new List().add(clause);	:}
|	clause_list clause    	{: return clause_list.add(clause); :}
 ;

Match match = LCURLYBRACE MATCH COMMA INTEGER.rowNumber COMMA variable.left COMMA value.right RCURLYBRACE
        {: return new Match(left, right); :}
;

Clause clause = LCURLYBRACE CLAUSE COMMA INTEGER.rowNumber COMMA variable_list.variables COMMA match_list.matches COMMA form_list RCURLYBRACE
       {: return new Clause(variables, matches, form_list); :}
;

Tuple tuple =
 LCURLYBRACE TUPLE COMMA INTEGER.rowNumber COMMA value_list RCURLYBRACE
        {: return new Tuple(value_list); :}
;

List value_list =
        LBRACKET RBRACKET       {: return new List(); :}
|   value VALUE                 {: return new List().add(value); :}
|   value_list value VALUE      {: return value_list.add(value); :}
;

Value value =
    ident
|   atom
|   integer
|   string
;

Ident ident =
|   variable
|   pid
;

List variable_list =
    LBRACKET RBRACKET       {: return new List(); :}
|   variable                {: return new List().add(variable); :}
|   variable_list variable  {: return variable_list.add(variable); :}
;

Integer integer =
    LCURLYBRACE STRING COMMA INTEGER.rowNumber COMMA INTEGER.val RCURLYBRACE
    {: return new Integer(Integer.parseInt(val)); :}
;

String string = LCURLYBRACE STRING COMMA INTEGER.rowNumber COMMA STRINGVALUE RCURLYBRACE
      {: return new String(STRINGVALUE); :}
;

Atom atom = LCURLYBRACE ATOM COMMA INTEGER.rowNumber COMMA ATOMID RCURLYBRACE
        {: return new Atom(ATOMID); :}
;

Pid pid = PID.id
     {: return new Pid(id); :}
;

Variable variable =
    LCURLYBRACE VAR COMMA INTEGER.rowNumber COMMA VARIABLEID RCURLYBRACE
    {: return new Variable(VARIABLEID); :}
;
