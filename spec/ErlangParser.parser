%header {:
	/* This code is inlined before the generated parser */
	package miniErlang;
:};

%embed {:
	/* This code is inlined in the generated parser class */
:};

/* Just to shut up Beaver warnings */
%goal goal;
%left RBRACKET;
/* Productions with semantic actions building the JastAdd AST */

program goal =
	module_list 	    	    {: return new Program(module_list); :}
;

Module module =  /* Ci mettiamo dentro anche la start */
   LBRACKET
    LCURLYBRACE ATTRIBUTE COMMA INTEGER COMMA MODULE COMMA IDENTIFIER.value RCURLYBRACE COMMA
        LCURLYBRACE FUNCTION COMMA INTEGER
            COMMA START COMMA INTEGER COMMA
            LBRACKET
                LCURLYBRACE CLAUSE COMMA INTEGER COMMA LBRACKET RBRACKET COMMA
                LBRACKET RBRACKET COMMA LBRACKET process RBRACKET RCURLYBRACE
            RBRACKET
        RCURLYBRACE COMMA
    function_list
    RBRACKET
    {: return new Module(value, function_list); :}
;

List module_list =
    module                  {: return new List().add(module); :}
|   module_list COMMA module      {: return module_list.add(module); :}
;

List function_list =
	function		                {: return new List().add(function);	:}
|	function_list COMMA function	{: return function_list.add(function); :}
;

Function function =
LCURLYBRACE FUNCTION COMMA INTEGER COMMA IDENTIFIER.funName COMMA INTEGER COMMA
    LBRACKET
            LCURLYBRACE CLAUSE COMMA INTEGER COMMA
            LBRACKET variable_list.vars RBRACKET COMMA LBRACKET RBRACKET COMMA
            LBRACKET process RBRACKET RCURLYBRACE
    RBRACKET
RCURLYBRACE
     {: return new Function("", funName, vars, process); :}
|
LCURLYBRACE ATTRIBUTE COMMA INTEGER COMMA TYPE COMMA LCURLYBRACE IDENTIFIER.funType COMMA atom COMMA LBRACKET RBRACKET RCURLYBRACE RCURLYBRACE COMMA
LCURLYBRACE FUNCTION COMMA INTEGER
    COMMA IDENTIFIER.funName COMMA
    INTEGER.numArguments COMMA
    LBRACKET
                LCURLYBRACE CLAUSE COMMA INTEGER COMMA
                LBRACKET variable_list.vars? RBRACKET COMMA
                LBRACKET RBRACKET COMMA LBRACKET process RBRACKET RCURLYBRACE
    RBRACKET
RCURLYBRACE
     {: return new Function(funType, funName, vars, process); :}
;

ReceiveClause receive_clause =
    LCURLYBRACE CLAUSE COMMA INTEGER COMMA
    LBRACKET
        LCURLYBRACE
            TUPLE COMMA INTEGER COMMA
            LBRACKET
            atom.sender COMMA atom.label COMMA pattern_list.vars
            RBRACKET
        RCURLYBRACE
    RBRACKET COMMA LBRACKET RBRACKET COMMA
    LBRACKET process RBRACKET RCURLYBRACE
       {: return new ReceiveClause(sender, label, vars, process); :}
;

CaseClause case_clause =
    LCURLYBRACE CLAUSE COMMA INTEGER COMMA
    LBRACKET pattern_list.patterns RBRACKET COMMA
    LBRACKET RBRACKET COMMA LBRACKET process RBRACKET RCURLYBRACE
       {: return new CaseClause(patterns, process); :}
;

List case_clause_list =
	case_clause   		                                {: return new List().add(case_clause);	:}
|	case_clause_list COMMA case_clause    	            {: return case_clause_list.add(case_clause); :}
;

List receive_clause_list =
	receive_clause   		                        {: return new List().add(receive_clause);	:}
|	receive_clause_list COMMA receive_clause    	{: return receive_clause_list.add(receive_clause); :}
;

Message message =
 LCURLYBRACE TUPLE COMMA INTEGER COMMA
    LBRACKET sender_id.recipient COMMA atom.label COMMA expression_list RBRACKET RCURLYBRACE
        {: return new Message(recipient, label, expression_list); :}
;

Process process =
   LCURLYBRACE OPERATOR COMMA INTEGER COMMA SINGLEMARKS SEND SINGLEMARKS COMMA
        atom.dest COMMA message.message RCURLYBRACE COMMA process.next
        {: return new Send(dest, message,next); :}
|	LCURLYBRACE RECEIVE COMMA INTEGER COMMA
    LBRACKET receive_clause_list.clauses RBRACKET RCURLYBRACE process.next?
 		{: return new Receive(clauses, next); :}
|	LCURLYBRACE RECEIVE COMMA INTEGER COMMA
    LBRACKET receive_clause_list.clauses RBRACKET RCURLYBRACE
    COMMA process.next?
 		{: return new Receive(clauses, next); :}
|   LCURLYBRACE CASE COMMA INTEGER COMMA expression_list.matchingForm COMMA
    LBRACKET case_clause_list.clauses RBRACKET RCURLYBRACE
        {: return new Case(matchingForm, clauses); :}
|   LCURLYBRACE MATCH COMMA INTEGER COMMA variable.left
                COMMA expression.right RCURLYBRACE COMMA process.next
            {: return new Let(left, right, next); :}
|   expression
        {: return new ExpressionProcess(expression); :}
;


/* ***************************************************************** */

Expression expression =
    LCURLYBRACE OPERATOR COMMA INTEGER COMMA SINGLEMARKS SYMBOL.sym SINGLEMARKS COMMA
    expression.op1 COMMA expression.op2 RCURLYBRACE
    {: return new Operator(sym,op1, op2); :}
|   LCURLYBRACE CALL COMMA INTEGER COMMA atom.method COMMA
    LBRACKET expression_list.arguments RBRACKET RCURLYBRACE
       {: return new Call(method, arguments); :}
|   LCURLYBRACE CALL COMMA INTEGER COMMA
    LCURLYBRACE ATOM COMMA INTEGER_ COMMA SELF RCURLYBRACE
    COMMA LBRACKET RBRACKET RCURLYBRACE
       {: return new Self(); :}
|   pattern

;

List expression_list =
	expression   		                    {: return new List().add(expression);	:}
|	expression_list COMMA expression    	{: return expression_list.add(expression); :}
 ;

List variable_list =
	variable    		                    {: return new List().add(variable);	:}
|	variable_list COMMA variable          	{: return variable_list.add(variable); :}
 ;

Pattern pattern =
    litteral
|   variable
;

List pattern_list =
	pattern   		                {: return new List().add(pattern);	:}
|	pattern_list COMMA pattern    	{: return pattern_list.add(pattern); :}
 ;


Litteral litteral =
    atom
|   pid
|   number
|   charlist
|   boolean
|   null
;

SenderId sender_id =
    variable.var        {: return new VarSender(var.getIdent());    :}
|   atom.at             {: return new AtomSender(at.getIdent());   :}
;

Number number =
    LCURLYBRACE INTTYPE COMMA INTEGER COMMA INTEGER.val RCURLYBRACE
    {: return new Number(Integer.parseInt(val)); :}
;

Null null =
    LCURLYBRACE NULL COMMA INTEGER RCURLYBRACE
    {: return new Null(); :}
;


CharList charlist = LCURLYBRACE STRING COMMA INTEGER COMMA STRINGVALUE RCURLYBRACE
      {: return new CharList(STRINGVALUE); :}
;

Boolean boolean =
    LCURLYBRACE ATOM COMMA INTEGER COMMA TRUE RCURLYBRACE
    {: return new Boolean(true); :}
|   LCURLYBRACE ATOM COMMA INTEGER COMMA FALSE RCURLYBRACE
     {: return new Boolean(false); :}

Atom atom =
LCURLYBRACE ATOM COMMA INTEGER COMMA IDENTIFIER.i RCURLYBRACE
        {: return new Atom(i); :}
|LCURLYBRACE ATOM COMMA INTEGER COMMA ATOMID RCURLYBRACE
        {: return new Atom(ATOMID); :}
;

Pid pid = PID.mypid
     {: return new Pid(mypid); :}
;

Variable variable =
    LCURLYBRACE VAR COMMA INTEGER COMMA VARIABLEID RCURLYBRACE
    {: return new Variable(VARIABLEID); :}
;
