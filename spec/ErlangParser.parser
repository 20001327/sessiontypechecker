%header {:
	/* This code is inlined before the generated parser */
	package miniErlang;
:};

%embed {:
	/* This code is inlined in the generated parser class */
:};

/* Just to shut up Beaver warnings */
%goal goal;
%left RBRACKET;
%left SINGLEMARKS;
/* Productions with semantic actions building the JastAdd AST */

program goal =
	module_list 	    	    {: return new Program(module_list); :}
;

Anno anno =
     INTEGER.i
     {: return new Anno(Integer.parseInt(i),0); :}
|    LCURLYBRACE INTEGER.i COMMA INTEGER.o RCURLYBRACE
     {: return new Anno(Integer.parseInt(i),Integer.parseInt(o)); :}
;

Module module =
   LBRACKET
    LCURLYBRACE ATTRIBUTE COMMA anno COMMA MODULE COMMA IDENTIFIER.value RCURLYBRACE COMMA
        LCURLYBRACE FUNCTION COMMA anno
            COMMA START COMMA anno COMMA
            LBRACKET
                LCURLYBRACE CLAUSE COMMA anno COMMA LBRACKET RBRACKET COMMA
                LBRACKET RBRACKET COMMA LBRACKET
                     LCURLYBRACE CALL COMMA anno COMMA
                     LCURLYBRACE ATOM COMMA anno COMMA REGISTER RCURLYBRACE
                      COMMA
                        LBRACKET
                            LCURLYBRACE ATOM COMMA anno COMMA IDENTIFIER.value1 RCURLYBRACE COMMA
                            LCURLYBRACE CALL COMMA anno COMMA
                            LCURLYBRACE ATOM COMMA anno COMMA SPAWN RCURLYBRACE COMMA
                                LBRACKET
                                LCURLYBRACE ATOM COMMA anno COMMA IDENTIFIER.value2 RCURLYBRACE COMMA
                                LCURLYBRACE ATOM COMMA anno COMMA IDENTIFIER.funName RCURLYBRACE COMMA
                                LCURLYBRACE NULL COMMA anno RCURLYBRACE
                                RBRACKET
                                RCURLYBRACE
                        RBRACKET
                     RCURLYBRACE
                RBRACKET RCURLYBRACE
            RBRACKET
        RCURLYBRACE COMMA
    function_list
    RBRACKET
    {: return new Module(value, value1, value2, funName, function_list); :}
;

List module_list =
    module                  {: return new List().add(module); :}
|   module_list COMMA module      {: return module_list.add(module); :}
;

List function_list =
	function		                {: return new List().add(function);	:}
|	function_list COMMA function	{: return function_list.add(function); :}
;

Function function =
    funtype?
    LCURLYBRACE FUNCTION COMMA anno
    COMMA IDENTIFIER.funName COMMA
    anno.numArguments COMMA
    LBRACKET
                LCURLYBRACE CLAUSE COMMA anno COMMA
                LBRACKET variable_list.vars? RBRACKET COMMA
                LBRACKET RBRACKET COMMA LBRACKET process RBRACKET RCURLYBRACE
    RBRACKET
RCURLYBRACE
     {: return new Function(funtype, funName, vars, process); :}
;

FunType funtype =
LCURLYBRACE ATTRIBUTE COMMA anno COMMA TYPE COMMA
    LCURLYBRACE IDENTIFIER.fun
    COMMA
    LCURLYBRACE ATOM COMMA anno COMMA SINGLEMARKS session SINGLEMARKS RCURLYBRACE
    COMMA
    LBRACKET RBRACKET RCURLYBRACE RCURLYBRACE COMMA
{: return new FunType(fun, new List(), session ); :}
;

ReceiveClause receive_clause =
    LCURLYBRACE CLAUSE COMMA anno COMMA
    LBRACKET
        LCURLYBRACE
            TUPLE COMMA anno COMMA
            LBRACKET
            atom.sender COMMA atom.label COMMA pattern_list.vars?
            RBRACKET
        RCURLYBRACE
    RBRACKET COMMA LBRACKET RBRACKET COMMA
    LBRACKET process RBRACKET RCURLYBRACE
       {: return new ReceiveClause(sender, label, vars, process); :}
|    LCURLYBRACE CLAUSE COMMA anno COMMA
     LBRACKET
         LCURLYBRACE
             TUPLE COMMA anno COMMA
             LBRACKET
             atom.sender COMMA atom.label
             RBRACKET
         RCURLYBRACE
     RBRACKET COMMA LBRACKET RBRACKET COMMA
     LBRACKET process RBRACKET RCURLYBRACE
        {: return new ReceiveClause(sender, label, new List(), process); :}
;

CaseClause case_clause =
    LCURLYBRACE CLAUSE COMMA anno COMMA
    LBRACKET pattern_list.patterns RBRACKET COMMA
    LBRACKET RBRACKET COMMA LBRACKET process RBRACKET RCURLYBRACE
       {: return new CaseClause(patterns, process); :}
;

List case_clause_list =
	case_clause   		                                {: return new List().add(case_clause);	:}
|	case_clause_list COMMA case_clause    	            {: return case_clause_list.add(case_clause); :}
;

List receive_clause_list =
	receive_clause   		                        {: return new List().add(receive_clause);	:}
|	receive_clause_list COMMA receive_clause    	{: return receive_clause_list.add(receive_clause); :}
;

Message message =
 LCURLYBRACE TUPLE COMMA anno COMMA
    LBRACKET sender_id.recipient COMMA atom.label COMMA expression_list RBRACKET RCURLYBRACE
        {: return new Message(recipient, label, expression_list); :}
|  LCURLYBRACE TUPLE COMMA anno COMMA
      LBRACKET sender_id.recipient COMMA atom.label RBRACKET RCURLYBRACE
          {: return new Message(recipient, label, new List()); :}
;

Process process =
   LCURLYBRACE OPERATOR COMMA anno COMMA SEND COMMA
        atom.dest COMMA message.message RCURLYBRACE COMMA process.next?
        {: return new Send(dest, message,next); :}
|   LCURLYBRACE OPERATOR COMMA anno COMMA SEND COMMA
         atom.dest COMMA message.message RCURLYBRACE process.next?
         {: return new Send(dest, message,next); :}
|	LCURLYBRACE RECEIVE COMMA anno COMMA
    LBRACKET receive_clause_list.clauses RBRACKET RCURLYBRACE process.next?
 		{: return new Receive(clauses, next); :}
|	LCURLYBRACE RECEIVE COMMA anno COMMA
    LBRACKET receive_clause_list.clauses RBRACKET RCURLYBRACE
    COMMA process.next?
 		{: return new Receive(clauses, next); :}
|   LCURLYBRACE CASE COMMA anno COMMA expression_list.matchingForm COMMA
    LBRACKET case_clause_list.clauses RBRACKET RCURLYBRACE process.next?
        {: return new Case(matchingForm, clauses, next); :}
|   LCURLYBRACE CASE COMMA anno COMMA expression_list.matchingForm COMMA
    LBRACKET case_clause_list.clauses RBRACKET RCURLYBRACE COMMA process.next?
        {: return new Case(matchingForm, clauses, next); :}
|   LCURLYBRACE MATCH COMMA anno COMMA variable.left
                COMMA expression.right RCURLYBRACE COMMA process.next
            {: return new Let(left, right, next); :}
|   expression process.next?
        {: return new ExpressionProcess(expression, next); :}
|   expression COMMA process.next?
        {: return new ExpressionProcess(expression, next); :}
;


/* ***************************************************************** */

Expression expression =
operator
|   LCURLYBRACE CALL COMMA anno COMMA atom.method COMMA
    LBRACKET expression_list.arguments? RBRACKET RCURLYBRACE
       {: return new Call(method, arguments); :}
|   register
|   unregister
|   LCURLYBRACE CALL COMMA anno COMMA
    LCURLYBRACE ATOM COMMA anno.ann COMMA SELF RCURLYBRACE
    COMMA LBRACKET RBRACKET RCURLYBRACE
       {: return new Self(); :}
|   pattern

;

Register register =
   LCURLYBRACE CALL COMMA anno COMMA
    LCURLYBRACE ATOM COMMA anno COMMA REGISTER.reg RCURLYBRACE
    COMMA LBRACKET expression_list.arguments RBRACKET RCURLYBRACE
       {: return new Call(new Atom(reg), arguments); :};

Unregister unregister =
  LCURLYBRACE CALL COMMA anno COMMA
           LCURLYBRACE ATOM COMMA anno COMMA UNREGISTER.reg RCURLYBRACE
           COMMA LBRACKET expression_list.arguments RBRACKET RCURLYBRACE
              {: return new Call(new Atom(reg), arguments); :}
;

Operator operator =
    LCURLYBRACE OPERATOR COMMA anno COMMA SYMBOL.sym COMMA
    expression.op1 COMMA expression.op2 RCURLYBRACE
    {: return new Operator(sym,op1, op2); :}
|    LCURLYBRACE OPERATOR COMMA anno COMMA DIVISION.sym COMMA
     expression.op1 COMMA expression.op2 RCURLYBRACE
     {: return new Operator(sym,op1, op2); :}
|    LCURLYBRACE OPERATOR COMMA anno COMMA LESS.sym COMMA
     expression.op1 COMMA expression.op2 RCURLYBRACE
     {: return new Operator(sym,op1, op2); :}
;

List expression_list =
	expression   		                    {: return new List().add(expression);	:}
|	expression_list COMMA expression    	{: return expression_list.add(expression); :}
 ;

List variable_list =
	variable    		                    {: return new List().add(variable);	:}
|	variable_list COMMA variable          	{: return variable_list.add(variable); :}
 ;

Pattern pattern =
    litteral
|   variable
;

List pattern_list =
	pattern   		                {: return new List().add(pattern);	:}
|	pattern_list COMMA pattern    	{: return pattern_list.add(pattern); :}
 ;


Litteral litteral =
    atom
|   pid
|   number
|   charlist
|   boolean
;

SenderId sender_id =
    variable.var        {: return new VarSender(var.getIdent());    :}
|   atom.at             {: return new AtomSender(at.getIdent());   :}
;

Number number =
    LCURLYBRACE INT COMMA anno COMMA INTEGER.val RCURLYBRACE
    {: return new Number(Integer.parseInt(val)); :}
;


CharList charlist = LCURLYBRACE STRING COMMA anno COMMA STRINGVALUE RCURLYBRACE
      {: return new CharList(STRINGVALUE); :}
;

Boolean boolean =
    LCURLYBRACE ATOM COMMA anno COMMA TRUE RCURLYBRACE
    {: return new Boolean(true); :}
|   LCURLYBRACE ATOM COMMA anno COMMA FALSE RCURLYBRACE
     {: return new Boolean(false); :}
;

Atom atom =
LCURLYBRACE ATOM COMMA anno COMMA IDENTIFIER.i RCURLYBRACE
        {: return new Atom(i); :}
|LCURLYBRACE ATOM COMMA anno COMMA ATOMID RCURLYBRACE
        {: return new Atom(ATOMID); :}
;

Pid pid = PID.mypid
     {: return new Pid(mypid); :}
;

Variable variable =
    LCURLYBRACE VAR COMMA anno COMMA ATOMID RCURLYBRACE
    {: return new Variable(ATOMID.replace("'","")); :}
;



Session session =
    literaltype
|   sessionsend
|   sessionreceive
|   INTERNALCHOICE LQUAD session_send_list.list RQUAD
    {: return new InternalChoice(list); :}
|   EXTERNALCHOICE LQUAD session_receive_list.list RQUAD
     {: return new ExternalChoice(list); :}
|   OPENANGULAR OPENANGULAR IDENTIFIER.i DOT session.next
     {: return  new RequestForwardDelegation(new Atom(i), next); :}
|   CLOSEANGULAR CLOSEANGULAR IDENTIFIER.i DOT session.next
     {: return  new AcceptBackwardDelegation(new Atom(i), next); :}
|   IDENTIFIER.i OPENANGULAR OPENANGULAR DOT session.next
     {: return  new AcceptForwardDelegation(new Atom(i), next); :}
|   IDENTIFIER.i CLOSEANGULAR CLOSEANGULAR DOT session.next
     {: return  new RequestBackwardDelegation(new Atom(i), next); :}
|   END
     {: return new End(); :}
;

SessionSend sessionsend =
    IDENTIFIER.sender SESSIONSEND IDENTIFIER.label DOT session.next
    {: return new SessionSend(new Atom(sender), new Atom(label), new List(), next); :}
|   IDENTIFIER.sender SESSIONSEND IDENTIFIER.label OPENANGULAR literal_type_list.l CLOSEANGULAR DOT session.next
    {: return new SessionSend(new Atom(sender), new Atom(label), l, next); :}
;

List session_send_list =
    sessionsend                             {: return new List(sessionsend); :}
|   session_send_list COMMA sessionsend     {: return session_send_list.add(sessionsend); :}
;

SessionReceive sessionreceive =
    IDENTIFIER.recipient SESSIONRECEIVE IDENTIFIER.label DOT session.next
     {: return new SessionReceive(new Atom(recipient), new Atom(label), new List(), next); :}
|   IDENTIFIER.recipient SESSIONRECEIVE IDENTIFIER.label OPENANGULAR literal_type_list.l CLOSEANGULAR DOT session.next
     {: return new SessionReceive(new Atom(recipient), new Atom(label), l, next); :}
;

List session_receive_list =
    sessionreceive                             {: return new List(sessionreceive); :}
|   session_receive_list COMMA sessionreceive  {: return session_receive_list.add(sessionreceive); :}
;

LiteralType literaltype =
    STRINGTYPE  {: return new StringType(); :}
|    INTTYPE     {: return new IntType(); :}
|    ATOMTYPE    {: return new AtomType(); :}
;

List literal_type_list =
    literaltype                             {: return new List(literaltype); :}
|   literal_type_list COMMA literaltype     {: return literal_type_list.add(literaltype); :}
;