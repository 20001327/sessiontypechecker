// Sie m√ºssen ggf. diese Datei an ihre minijava.ast anpassen

aspect PrettyPrint {
    public class PrettyPrinter {
        public static String INDENT = "  ";
        private StringBuilder sb;

        public PrettyPrinter() {
            sb = new StringBuilder();
        }

        public void append(String s) {
            sb.append(s);
        }

        public String getString() {
            return sb.toString();
        }

        public void reset() {
            sb.setLength(0);
        }
    }

    //similar to JastAdd Java compiler
    syn String ASTNode.indent()

    {
        String indent = extractIndent();
        return indent.startsWith("\n") ? indent : ("\n" + indent);
    }

    syn String ASTNode.extractIndent()

    {
        if (getParent() == null)
            return "";
        String indent = getParent().extractIndent();

        if (getParent().addsIndentationLevel())
            indent += PrettyPrinter.INDENT;
        return indent;
    }

    syn boolean ASTNode.addsIndentationLevel() =false;
    eq Program.addsIndentationLevel() =true;
    eq Module.addsIndentationLevel() =false;
    eq Function.addsIndentationLevel() =true;
    eq Form.addsIndentationLevel() =true;

    syn lazy PrettyPrinter Program.printer() {
        return new PrettyPrinter();
    }

    eq Program.getModules().printer() = this.printer();
    inh lazy PrettyPrinter Module.printer();
    inh lazy PrettyPrinter Function.printer();
    inh lazy PrettyPrinter Form.printer();



    syn PrettyPrinter Program.print()

    {
        printer().reset();
        for (Module module : getModuless()) module.print();
        return printer();
    }

    public void Module.print() {
        printer().append("{\n\"partecipant\": \"" + getPartecipant() + "\" ,");
        printer().append("\n\"process\": {");
        for (Function f : getFunctionss()) {
            f.print();
        }
        printer().append("\n}");
        printer().append("\n}");
    }

    public void Function.print() {
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("\"" + getFunctionName() + "\": {");
        for (Form p : getExpressionss()) {
            p.print();
        }
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("}");
    }

    public void Clause.print(){
        printer().append("\"clause\":{");
        printer().append(indent() + PrettyPrinter.INDENT +
                "\"arguments\":[");
        for (Pattern pattern : getPatternVars()) {
            if(pattern!=null){
                pattern.print();
                printer().append(",");
            }
        }
        printer().append("],");
        printer().append( "\"body\":{");
        for (Form form : getFormss()) {
            form.print();
            printer().append(",");
        }
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("}");
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("}");
    }

    public void Pattern.print(){
        printer().append("Pattern");
    }

    public void Form.print(){
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("Form");
    }

    public void Register.print(){
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("Register");
    }

    public void Unregister.print(){
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("Unregister");
    }

    public void Call.print(){
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("Call");
    }

    public void Match.print(){
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("Match");
    }

    public void Case.print(){
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("Case");
    }

    public void Receive.print(){
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("Receive");
    }

    public void Send.print(){
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("Send");
    }

    public void Operator.print(){
        printer().append(indent() + PrettyPrinter.INDENT);
        printer().append("Operator");
    }

    public void Tuple.print(){
        printer().append("Tuple");
    }

    public void Atom.print(){
        printer().append("Atom");
    }

    public void CharList.print(){
        printer().append("CharList");
    }

    public void Number.print(){
        printer().append("Number");
    }

    public void Variable.print(){
        printer().append("Variable");
    }

    public void Pid.print(){
        printer().append("Pid");
    }



}