import java.util.HashMap;
import java.util.Map;

aspect TypeAnalysis {

    public class TypeInfo {

        Map<String,Session> gamma = new HashMap<>();
        List<Module> moduleList = new List();
        String moduleName;
        Atom delegating;

        public void setModuleName(String name){
            moduleName = name;
        }

        public String getModuleName(){
            return moduleName;
        }

        public void setModuleList(List<Module> list){
            moduleList = list;
        }

        public List<Module> getModuleList(){
            return moduleList;
        }

        public void setDelegating(Atom del){
            delegating = del;
        }

        public Atom getDelegating(){
            return delegating;
        }

        public Process getNext(Process p){
            String className = p.getClass().getName();
            if(className.equals(ExpressionProcess.class.getName())){
                ExpressionProcess exp = (ExpressionProcess) p;
                if(exp.hasNext()){
                    return exp.getNext();
                }
            }else if(className.equals(Send.class.getName())){
                Send exp = (Send) p;
                if(exp.hasNext()){
                    return exp.getNext();
                }
            }

            return null;
        }

        public Session getGammaSessionType(String key){
            if(gamma.containsKey(key)){
                return gamma.get(key);
            }

            return null;
        }

        public void setGammaSessionType(String name, Session type){
            gamma.put(name,type);
        }

        public Send searchSendInMod(String moduleName,String dest, String label){
            for (Module module: moduleList){
                if(module.getPartecipant().equals(moduleName)){
                    for(Function f: module.getFunctionss()){
                        return searchSend(f.getBody(), dest, label);
                    }
                }
            }
            return null;
        }


        public Send searchSend(Process process, String dest, String label){
            String className = process.getClass().getName();
            if(className.equals(Send.class.getName())){
                Send s = (Send) process;
                if(s.getRecipient().getIdent().equals(dest)
                    && s.getMessage().getLabel().getIdent().equals(label)){
                    return s;
                }else if(s.hasNext()) {
                    return searchSend(s.getNext(),dest,label);
                }
            }else if(className.equals(Receive.class.getName())){
                Receive s = (Receive) process;
                Send send = null;
                for (ReceiveClause rc : s.getClausess()){
                    send = searchSend(rc.getActions(),dest,label);
                    if (send!=null) return send;
                }
                if(s.hasNext()) return searchSend(s.getNext(),dest,label);
            }else if(className.equals(Case.class.getName())){
                Case s = (Case) process;
                Send send = null;
                for (CaseClause rc : s.getClausess()){
                    send = searchSend(rc.getActions(),dest,label);
                    if (send!=null) return send;
                }
                if(s.hasNext()) return searchSend(s.getNext(),dest,label);
            }else if(className.equals(Let.class.getName())){
                Let s = (Let) process;
                return searchSend(s.getNext(),dest,label);
            }else if(className.equals(ExpressionProcess.class.getName())){
                ExpressionProcess s = (ExpressionProcess) process;
                if(s.hasNext()) return searchSend(s.getNext(),dest,label);
            }

            return null;
        }

    }

    syn lazy TypeInfo Function.typeInfo() {
       return new TypeInfo();
    }


    public void Program.checkType(){
        for (Module module: getModuless()){
            for (Function function : module.getFunctionss()){
                function.typeInfo().setModuleName(module.getPartecipant());
                function.typeInfo().setModuleList(getModuless());
                FunType type1 = function.getType();
                printer().reset();
                type1.print();
                System.out.println("\n\ntipo atteso: ");
                System.out.println(printer().getString());

                if(function.getType().getNumArguments()==function.getNumParameters()){
                    Session t = function.getBody().type();
                    FunctionType type2 = new FunctionType(function.getFunctionName(),
                                                function.getType().getArgumentss(),t);
                    System.out.println("tipo calcolato: ");
                    System.out.println(type2.stampa().getString());
                }
            }
        }
    }


    eq Function.getBody().typeInfo() = this.typeInfo();

    inh lazy TypeInfo FunType.typeInfo();
    inh lazy TypeInfo Process.typeInfo();
    inh lazy TypeInfo Expression.typeInfo();
    inh lazy TypeInfo Session.typeInfo();
    inh lazy TypeInfo Message.typeInfo();
    inh lazy TypeInfo ReceiveClause.typeInfo();
    inh lazy TypeInfo CaseClause.typeInfo();
    inh lazy TypeInfo SenderId.typeInfo();


    // get fun type inheriting
    eq Function.getBody().getFunType() = this.getType();

    inh lazy FunType Process.getFunType();
    inh lazy FunType Expression.getFunType();


    // visita nel session type annotato per trovare i tipi di una send
    eq Function.getBody().getInfo(String label) = this.getInfo(label);
    inh lazy List<Session> Process.getInfo(String label);
    inh lazy List<Session> ReceiveClause.getInfo(String label);

    syn lazy List<Session> Function.getInfo(String label){
        return getType().getSessionType().getInfo(label);
    }



}
