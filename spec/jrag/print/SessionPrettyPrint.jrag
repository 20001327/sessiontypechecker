aspect SessionPrettyPrint{


    syn lazy PrettyPrinter FunType.stampante() {
        return new PrettyPrinter();
    }
    eq FunType.getArguments().stampante() = this.stampante();
    eq FunType.getSessionType().stampante() = this.stampante();
    inh lazy PrettyPrinter Session.stampante();
    inh lazy PrettyPrinter Atom.stampante();

    public abstract void Session.stampa();

    public void RecType.stampa(){
       stampante().append("rec");
       getRecVariable().stampa();
       stampante().append(".");
       getType().stampa();
    }

    public void RecVar.stampa(){
        stampante().append("$");
        stampante().append(getName());
    }

    public void FunType.stampa(){
       stampante().append("\n");
       stampante().append("-type " + getFunName() + "(");
       for (int i=0; i<getNumArguments(); i++) {
           LiteralType var = getArguments(i);
           stampante().append(var.getClass().getName());
           if(i<getNumArguments()-1){
               stampante().append(",");
           }
       }
       stampante().append(") :: '");
       getSessionType().stampa();
       stampante().append("'");
    }

    public void SessionSend.stampa(){
        getSender().stampa();
        stampante().append("!");
        getLabel().stampa();
        if(getNumType()>0){
            stampante().append("<");
            for (int i=0; i<getNumType(); i++) {
                Program.printLiteral(stampante(),getType(i));
                if(i<getNumType()-1){
                    stampante().append(",");
                }
            }
            stampante().append(">");
        }
        stampante().append(".");
        if(getNext()!=null)getNext().stampa();
    }
    public void ConnectingSend.stampa(){
        getSender().stampa();
        stampante().append("!+");
        getLabel().stampa();
        if(getNumType()>0){
            stampante().append("<");
            for (int i=0; i<getNumType(); i++) {
                Program.printLiteral(stampante(),getType(i));
                if(i<getNumType()-1){
                    stampante().append(",");
                }
            }
            stampante().append(">");
        }
        stampante().append(".");
        if(getNext()!=null)getNext().stampa();
    }

    public void SessionReceive.stampa(){
        getRecipient().stampa();
        stampante().append("?");
        getLabel().stampa();
        if(getNumType()>0){
        stampante().append("<");
            for (int i=0; i<getNumType(); i++) {
                Program.printLiteral(stampante(),getType(i));
                if(i<getNumType()-1){
                    stampante().append(",");
                }
            }
        stampante().append(">");
        }
        stampante().append(".");
        if(getNext()!=null)getNext().stampa();
    }

    public void InternalChoice.stampa(){
        stampante().append("@(");
        if(getNumSends()>0){
            for (int i=0; i<getNumSends(); i++) {
                getSends(i).stampa();
                if(i<getNumSends()-1){
                    stampante().append(",");
                }
            }
        }
        stampante().append(")");
    }

    public void ExternalChoice.stampa(){
        stampante().append("&(");
        if(getNumReceives()>0){
            for (int i=0; i<getNumReceives(); i++) {
                getReceives(i).stampa();
                if(i<getNumReceives()-1){
                    stampante().append(",");
                }
            }
        }
        stampante().append(")");
    }

    public void RequestForwardDelegation.stampa(){
        stampante().append("<<");
        getDelegating().stampa();
        stampante().append(".");
        getNext().stampa();
    }

    public void RequestBackwardDelegation.stampa(){
        getDelegating().stampa();
        stampante().append(">>");
        stampante().append(".");
        getNext().stampa();
    }

    public void AcceptForwardDelegation.stampa(){
        getDelegate().stampa();
        stampante().append("<<");
        stampante().append(".");
        getNext().stampa();
    }

    public void AcceptBackwardDelegation.stampa(){
        stampante().append(">>");
        getDelegate().stampa();
        stampante().append(".");
        if(getNext()!=null)getNext().stampa();
    }

    public void End.stampa(){
       stampante().append("End");
    }

    public void Atom.stampa() {
        stampante().append(getIdent());
    }

    public void ActorPid.stampa() {
        stampante().append("End");
    }

    public void AtS.stampa() {
        stampante().append("End");
    }

    public void AtomType.stampa() {
        stampante().append("End");
    }

    public void BoolType.stampa() {
        stampante().append("End");
    }

    public void IntType.stampa() {
        stampante().append("End");
    }

    public void PidType.stampa() {
        stampante().append("End");
    }

    public void StringType.stampa() {
        stampante().append("End");
    }



}