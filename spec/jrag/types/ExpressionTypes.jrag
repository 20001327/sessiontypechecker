aspect ExpressionTypes {

    syn lazy Session Expression.type();


    inh lazy FunType Expression.getFunType();
    inh lazy String Expression.getModuleName();

    inh lazy Delegating Call.delegating();

    eq Call.type(){
        if(getFunctionName().getIdent().equals("self")){
            return new PidType();
        }else{
             Session type = null;
             for(Function f : getFunctionss()){
                if(f.getFunctionName().equals(getFunctionName().getIdent())) {
                    type = f.getBody().type();
                }
             }

             return type;
         }
    }

    eq Self.type() {
        return new PidType();
    }

    eq Operator.type() {
        if(getLeftOp().type().isSameType(new BoolType())
            && getRightOp().type().isSameType(new BoolType())) {
            return new BoolType();
        }

        if(getLeftOp().type().isSameType(new IntType())
            && getRightOp().type().isSameType(new IntType())) {
            return new IntType();
        }

        return null;
    }
}