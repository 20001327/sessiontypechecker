aspect ProcessTypes{

   syn lazy Session Process.type();
   syn lazy Session ReceiveClause.type();
   syn lazy Session CaseClause.type();

   eq Program.getModules().getModulesList() = this.getModulesList();
   inh lazy List<Module> ReceiveClause.getModulesList();

   eq Module.getFunctions().getModuleName() = this.getPartecipant();
   inh lazy String Process.getModuleName();
   inh lazy String ReceiveClause.getModuleName();

   eq Function.getBody().getFunType() = this.getType();
   inh lazy FunType Process.getFunType();

   syn lazy Delegating Function.delegating() = new Delegating();
   eq Function.getBody().delegating() = this.delegating();
   inh lazy Delegating Process.delegating();
   inh lazy Delegating ReceiveClause.delegating();

   eq Send.type(){

       if(getMessage().getLabel().getIdent().equals("start_delegation") ){
            if(((Atom)getMessage().getPayload(0)).getIdent().equals(getModuleName()) &&
                   getMessage().getPayload(1).type().isSameType(new PidType())){
                        delegating().setDelegateName(getRecipient());
                        return new RequestForwardDelegation(getRecipient(), getNext().type());
            }
       }
       else{
           List<LiteralType> types = new List();
           for(int i=0;i<getMessage().getNumPayload();i++){
               types.add((LiteralType)getMessage().getPayload(i).type());
           }
           Session n = hasNext()?getNext().type():null;
           return new SessionSend(getRecipient(),getMessage().getLabel(), types, n);
       }

       return null;
    }

    eq Receive.type(){
        List<SessionReceive> types = new List();
        for(int i=0; i<getNumClauses();i++){
            Session t = getClauses(i).type();
            if(t.isSameType(new SessionReceive())){
                types.add((SessionReceive)t);
            }else{
                return t;
            }
        }
        if(types.getNumChild()==1) {
            return types.getChild(0);
        }
        return new ExternalChoice(types);
    }

    eq ReceiveClause.type(){
       List<LiteralType> sessions = new List();

       if(getLabel().getIdent().equals("end_delegation")
            && getSender().getIdent().equals(delegating().getDelegateName().getIdent())){
           return new RequestBackwardDelegation(getSender(),getActions().type());
       }

       if(getNumVariables()>0){
           if(getNumVariables()==2){
               if(getLabel().getIdent().equals("start_delegation")){
                   Send s = searchSendInMod(getSender().getIdent(), getModuleName(),getLabel().getIdent());
                   if(s.getMessage().getPayload(0).type().isSameType(new AtomType()) &&
                       s.getMessage().getPayload(1).type().isSameType(new PidType())){
                           Process p = getActions();
                           Process p1 = getNextProcess(p);
                           Process p2 = getNextProcess(p1);
                           for(int i=0; i<s.getMessage().getNumPayload();i++){
                               addDeclaration(((Variable)getVariables(i)).getIdent(),
                               s.getMessage().getPayload(i).type(), s.getMessage().getPayload(i));
                           }

                           Atom d = (Atom)s.getMessage().getPayload(0);

                           Call unreg1 = new Call(new Atom("unregister"),new List(new Atom(getModuleName())));
                           Call unreg2 = new Call(new Atom("unregister"), new List(d));
                           Call reg1 = new Call(new Atom("register"), new List(d,new Call(new Atom("self"), new List())));

                           boolean differ = !p.equals(p1);
                           boolean b1 = (p.equals(unreg1) || p.equals(unreg2));
                           boolean b2 = (p1.equals(unreg1) || p1.equals(unreg2));
                           boolean b3 = p2.equals(reg1);

                           if(b1 && b2 && b3 && differ){
                                delegating().setName(d);
                                return new AcceptForwardDelegation(d, getNextProcess(p2).type());
                           }
                       }
               }
          }

           for(int i=0; i<getNumVariables();i++){
               if(getVariables(i).getClass().getName().equals(Variable.class.getName())){
                   addDeclaration(((Variable)getVariables(i)).getIdent(),getInfo(getLabel().getIdent(), i), null);
               }

               sessions.add((LiteralType)getVariables(i).type());
           }
       }

       return new SessionReceive(getSender(),getLabel(),sessions, getActions().type());
    }

    eq Let.type(){
        addDeclaration(getLeft().getIdent(),getRight().type(), getRight());
        return getNext().type();
    }

    eq ExpressionProcess.type(){
        Session s = getExpression().type();
        if(s.getClass().getName().equals(AcceptBackwardDelegation.class.getName())){
            return s;
        }else{
            if(hasNext()){
                return getNext().type();
            }
        }
        return s;
    }

    eq Case.type(){
        List<SessionSend> types = new List();
        for(int i=0; i<getNumClauses();i++){
            Session t = getClauses(i).type();
            if(t.isSameType(new SessionSend())){
                types.add((SessionSend)t);
            }
        }
        if(types.getNumChild()==1) {
            return types.getChild(0);
        }
        return new InternalChoice(types);
    }


    eq CaseClause.type(){
       return getActions().type();
    }

    syn Process Process.getNextProcess(Process p){
        String className = p.getClass().getName();
        if(className.equals(ExpressionProcess.class.getName())){
            ExpressionProcess exp = (ExpressionProcess) p;
            if(exp.hasNext()){
                return exp.getNext();
            }
        }else if(className.equals(Send.class.getName())){
            Send exp = (Send) p;
            if(exp.hasNext()){
                return exp.getNext();
            }
        }

        return null;
    }

    eq Receive.getClauses().getNextProcess(Process p) = this.getNextProcess(p);
    inh lazy Process ReceiveClause.getNextProcess(Process p);

    syn Send ReceiveClause.searchSendInMod(String moduleName,String dest, String label){
        for (Module module: getModulesList()){
            if(module.getPartecipant().equals(moduleName)){
                for(Function f: module.getFunctionss()){
                    return searchSend(f.getBody(), dest, label);
                }
            }
        }
        return null;
    }


    syn Send ReceiveClause.searchSend(Process process, String dest, String label){
        String className = process.getClass().getName();
        if(className.equals(Send.class.getName())){
            Send s = (Send) process;
            if(s.getRecipient().getIdent().equals(dest)
                && s.getMessage().getLabel().getIdent().equals(label)){
                return s;
            }else if(s.hasNext()) {
                return searchSend(s.getNext(),dest,label);
            }
        }else if(className.equals(Receive.class.getName())){
            Receive s = (Receive) process;
            Send send = null;
            for (ReceiveClause rc : s.getClausess()){
                send = searchSend(rc.getActions(),dest,label);
                if (send!=null) return send;
            }
            if(s.hasNext()) return searchSend(s.getNext(),dest,label);
        }else if(className.equals(Case.class.getName())){
            Case s = (Case) process;
            Send send = null;
            for (CaseClause rc : s.getClausess()){
                send = searchSend(rc.getActions(),dest,label);
                if (send!=null) return send;
            }
            if(s.hasNext()) return searchSend(s.getNext(),dest,label);
        }else if(className.equals(Let.class.getName())){
            Let s = (Let) process;
            return searchSend(s.getNext(),dest,label);
        }else if(className.equals(ExpressionProcess.class.getName())){
            ExpressionProcess s = (ExpressionProcess) process;
            if(s.hasNext()) return searchSend(s.getNext(),dest,label);
        }

        return null;
    }


    public class Delegating {

        Atom name;
        Atom delegateName;

        public void setName(Atom del){
            name = del;
        }

        public Atom getName(){
            return name;
        }

        public void setDelegateName(Atom del){
            delegateName = del;
        }

        public Atom getDelegateName(){
            return delegateName;
        }
    }



}