aspect ProjectDelegating{

    syn lazy Session Global.projectDelegating(String p, String q){
        return null;
    }


    syn Session CommunicationChoices.projectDelegating(String p, String q){

        if(getNumCommunications()==1){
            return getCommunications(0).projectDelegating(p, q);
        }else{
            Session s = null;
            for(Communication c : getCommunicationss()){
               Session s1 = c.projectDelegating(p,q);
               if(s == null || s1.isSameType(s)){
                   // TODO: controllo non solo sul successivo immediato
                   // ma sull'insieme
                   s = c.projectDelegating(p,q);
               }else{
                   return null;
               }
            }
            return s;
        }
    }

    syn Session Communication.projectDelegating(String p, String q){
        if(!q.equals(getMessage().getRecipient()) && !q.equals(getMessage().getSender())){
            return getNext().projectDelegating(p,q);
        }

        return null;

    }

    syn Session Terminal.projectDelegating(String p, String q){
        return null;
    }

    syn Session StartDelegation.projectDelegating(String p, String q){
        if(!p.equals(getDelegate()) && !p.equals(getDelegating()) &&
                !q.equals(getDelegate()) && !q.equals(getDelegating())){
            return getNext().projectDelegating(p,q);
        }
        return null;
    }


    syn Session EndDelegation.projectDelegating(String p, String q){
        if(!p.equals(getDelegate()) && !p.equals(getDelegating()) &&
                !q.equals(getDelegate()) && !q.equals(getDelegating())){
            return getNext().projectDelegating(p,q);
        }else{
            if(p.equals(getDelegating()) && q.equals(getDelegate())){
                return new RequestBackwardDelegation(new Atom(q),getNext().project(p));
            }
        }
        return null;
    }





}