aspect ProjectDelegating{

    syn lazy Session Global.projectDelegating(String p, String q){
        return null;
    }


    syn Session CommunicationChoices.projectDelegating(String p, String q){

        if(getNumCommunications()==1){
            return getCommunications(0).projectDelegating(p, q);
        }else{
            Session s = null;
            for(Communication c : getCommunicationss()){
               Session s1 = c.projectDelegating(p,q);
               if(s == null || s1.isSameType(s)){
                   // TODO: controllo non solo sul successivo immediato
                   // ma sull'insieme
                   s = c.projectDelegating(p,q);
               }else{
                   return null;
               }
            }
            return s;
        }
    }

    syn Session Communication.projectDelegating(String p, String q){
        if(!q.equals(getMessage().getRecipient()) && !q.equals(getMessage().getSender())){
            return getNext().projectDelegating(p,q);
        }

        return null;

    }

    syn Session Terminal.projectDelegating(String p, String q){
        return null; // devo tornare errore se sono in delegazione
    }

    syn Session StartDelegation.projectDelegating(String p, String q){
        // TODO: delegazione che non coinvolge ne p ne q, getNext().project(p,q);
        return null;
    }


    syn Session EndDelegation.projectDelegating(String p, String q){
        // TODO: delegazione che non coinvolge ne p ne q, getNext().project(p,q); altrimenti controlla
        // che siano proprio p e q nell'ordine corretto
        return new RequestBackwardDelegation(new Atom(q),getNext().project(p));
    }





}