aspect Projection{

    syn Session GProg.project(String actor) {
        return getGlobal().project(actor);
    }

    syn lazy Session Global.project(String actor){
        return null;
    }


    syn Session CommunicationChoices.project(String actor){

        if(getNumCommunications()==1){
            return getCommunications(0).project(actor);
        }else{
            List<SessionSend> sends = new List();
            List<Session> receives = new List();
            for(Communication c : getCommunicationss()){
                Session projected = c.project(actor);
                if(projected.isSubtypeOf(new ExternalChoice()) || projected.isSubtypeOf(new SessionReceive())){
                    receives.add(projected);
                }else if(projected.isSubtypeOf(new SessionSend())){
                    sends.add((SessionSend) projected);
                }else{
                    return null;
                }
            }

            if(sends.getNumChild()>0){
                return new InternalChoice(sends);
            }

          if(receives.getNumChild()>0){
                List<SessionReceive> lis = Session.merge(receives);
                if(lis.getNumChild()==1) return lis.getChild(0);
                else{
                    ExternalChoice ext = new ExternalChoice(lis);
                    if(ext.isWellFormed()){
                        return ext;
                    }
                }
            }
        }

        return null;

    }

    syn Session Communication.project(String actor){
        if(actor.equals(getMessage().getSender())){
              return new SessionSend(new Atom(getMessage().getRecipient()),
                                    new Atom(getMessage().getLabel()),
                                    getMessage().getTypess(), getNext().project(actor));
        }else if(actor.equals(getMessage().getRecipient())){
              return new SessionReceive(new Atom(getMessage().getSender()),
                                new Atom(getMessage().getLabel()),
                                getMessage().getTypess(),getNext().project(actor));
        }

       return getNext().project(actor);

    }

    syn Session Terminal.project(String actor){
        return new End();
    }

    syn Session StartDelegation.project(String actor){
        if(getDelegating().equals(actor)){
            return new RequestForwardDelegation(new Atom(getDelegate()), getNext().projectDelegating(getDelegating(),getDelegate()));
        }else if(getDelegate().equals(actor)){
            return new AcceptForwardDelegation(new Atom(getDelegating()), getNext().projectDelegate(actor, getDelegating()));
        }

        return getNext().project(actor);
    }

    syn Session EndDelegation.project(String actor) {
        if(!getDelegate().equals(actor) && !getDelegating().equals(actor))
            return getNext().project(actor);

        return null;
    }

}