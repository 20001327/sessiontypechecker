aspect Projection{

    syn Session GProg.project(String actor) {
        return getGlobal().project(actor);
    }

    syn lazy Session Global.project(String actor){
        return null;
    }


    syn Session CommunicationChoices.project(String actor){

        if(getNumCommunications()==1){
            return getCommunications(0).project(actor);
        }else{
            List<SessionSend> sends = new List();
            List<SessionReceive> receives = new List();
            for(Communication c : getCommunicationss()){
                Session projected = c.project(actor);
                if(projected.isSubtypeOf(new SessionReceive())){
                    receives.add((SessionReceive)projected);
                }else if(projected.isSubtypeOf(new SessionSend())){
                    sends.add((SessionSend) projected);
                }
            }

            if(sends.getNumChild()>0){
                return new InternalChoice(sends);
            }

            if(receives.getNumChild()>0){
                return new ExternalChoice(Session.merge(receives));
            }
        }

        return null;

    }

    syn Session Communication.project(String actor){
        if(actor.equals(getMessage().getSender())){
              return new SessionSend(new Atom(getMessage().getRecipient()),
                                    new Atom(getMessage().getLabel()),
                                    getMessage().getTypess(), getNext().project(actor));
        }else if(actor.equals(getMessage().getRecipient())){
              return new SessionReceive(new Atom(getMessage().getSender()),
                                new Atom(getMessage().getLabel()),
                                getMessage().getTypess(),getNext().project(actor));
        }

       return getNext().project(actor);

    }

    syn Session Terminal.project(String actor){
        return new End();
    }



}