aspect ProjectDelegate{

    syn lazy Session Global.projectDelegate(String p, String q){
        return null;
    }


    syn Session CommunicationChoices.projectDelegate(String p, String q){

        if(getNumCommunications()==1){
            return getCommunications(0).projectDelegate(p, q);
        }else{
            List<SessionSend> sends = new List();
            List<Session> receives = new List();
            for(Communication c : getCommunicationss()){
                Session projected = c.projectDelegate(p,q);
                if(projected.isSubtypeOf(new ExternalChoice())
                    || projected.isSubtypeOf(new SessionReceive())){
                    receives.add(projected);
                }else if(projected.isSubtypeOf(new SessionSend())){
                    sends.add((SessionSend) projected);
                }
            }

            if(sends.getNumChild()>0){
                return new InternalChoice(sends);
            }

            if(receives.getNumChild()>0){
                return new ExternalChoice(Session.merge(receives));
            }
        }

        return null;

    }

    syn Session Communication.projectDelegate(String p, String q){
        if(q.equals(getMessage().getSender()) && !p.equals(getMessage().getRecipient())){
              return new SessionSend(new Atom(getMessage().getRecipient()), new Atom(getMessage().getLabel()),
                                    getMessage().getTypess(), getNext().projectDelegate(p, q));
        }else if(q.equals(getMessage().getRecipient()) && !p.equals(getMessage().getSender())){
              return new SessionReceive(new Atom(getMessage().getSender()),
                                new Atom(getMessage().getLabel()),
                                getMessage().getTypess(),getNext().projectDelegate(p,q));
        }else if(!p.equals(getMessage().getSender()) && !p.equals(getMessage().getSender()) &&
            !q.equals(getMessage().getRecipient()) && !q.equals(getMessage().getSender())){
            return getNext().projectDelegate(p,q);
        }

        return null;

    }

    syn Session Terminal.projectDelegate(String p, String q){
        return new End();
    }

    syn Session StartDelegation.projectDelegate(String p, String q){
        return null;
    }

    syn Session EndDelegation.projectDelegate(String p, String q){
        return new AcceptBackwardDelegation(new Atom(q),getNext().project(p));
    }





}