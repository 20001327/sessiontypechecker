import java.util.HashMap;
import java.util.Map;

aspect ProcessTypes{
    eq Program.getModules().getModulesList() = this.getModulesList();
    eq Module.getFunctions().getModuleName() = this.getPartecipant();
    eq Module.getFunctions().getFunctionss() = this.getFunctionss();
    eq Function.getBody().getFunType() = this.getType();

    syn lazy Session Process.type();

    inh lazy String Process.getModuleName();
    inh lazy List<Function> Process.getFunctionss();
    inh lazy FunType Process.getFunType();
    inh lazy Delegating Process.delegating();

    eq Register.type(){
        return null;
    }

    eq Let.type(){
        addDeclaration(getLeft().getIdent(),getRight().type(), getRight());
        return getNext().type();
    }

    eq ExpressionProcess.type(){
        Session s = getExpression().type();
        return s;
    }

     Process Process.getNextProcess(Process p){
        String className = p.getClass().getName();
        if(className.equals(Send.class.getName())){
            Send exp = (Send) p;
            return exp.getNext();
        } else if(className.equals(Register.class.getName())){
            Register exp = (Register) p;
            return exp.getNext();
        }else if(className.equals(Unregister.class.getName())){
           Unregister exp = (Unregister) p;
           return exp.getNext();
        }

        return null;
    }

    public class Delegating {

        Atom name;
        Atom delegateName;

        public void setName(Atom del){
            name = del;
        }

        public Atom getName(){
            return name;
        }

        public void setDelegateName(Atom del){
            delegateName = del;
        }

        public Atom getDelegateName(){
            return delegateName;
        }
    }

}