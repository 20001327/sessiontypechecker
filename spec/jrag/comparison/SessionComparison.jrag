aspect SessionComparison{

    public boolean FunType.compareWith(FunctionType type) {
        boolean name = this.getFunName().equals(type.getFunName());
        boolean arguments = Program.checkLists(getArgumentss(),type.getArgumentss());
        boolean sessions = getSessionType().equals(type.getSessionType());
        return name && arguments && sessions;
    }

    public static boolean Program.checkListsByClassName(List<? extends ASTNode> l1, List<? extends ASTNode> l2){
         Map<String, Integer> freq1 = new HashMap<>();
         l1.forEach(it -> freq1.merge(it.getClass().getName(), 1, (a, b) -> a + b));
         Map<String, Integer> freq2 = new HashMap<>();
         l2.forEach(it -> freq2.merge(it.getClass().getName(), 1, (a, b) -> a + b));
         return freq1.equals(freq2);
    }

    public boolean SessionSend.equals(Object other){

        if(Program.sameClass(this, other)){
            SessionSend send = (SessionSend) other;
            if(getSender().equals(send.getSender()) && getLabel().equals(send.getLabel())){
                boolean list = Program.checkListsByClassName(getTypes(), send.getTypes());
                return list && getNext().equals(send.getNext());
            }
        }
        return false;
    }

    public boolean SessionReceive.equals(Object other){
        if(Program.sameClass(this, other)){
            SessionReceive obj = (SessionReceive) other;
            if(getRecipient().equals(obj.getRecipient()) && getLabel().equals(obj.getLabel())){
                boolean list = Program.checkListsByClassName(getTypes(), obj.getTypes());
                return list && getNext().equals(obj.getNext());
            }
        }
        return false;
    }

    public boolean InternalChoice.equals(Object other){
              if(Program.sameClass(this, other)){
              InternalChoice obj = (InternalChoice) other;
              boolean foundAll = true;
              for (SessionSend send: getSendss()){
                boolean found = false;
                for (SessionSend s2 : obj.getSendss()){
                  found = found || send.equals(s2);
                }
                foundAll = found && foundAll;
              }
              return foundAll;
          }
        return false;
    }

    public boolean ExternalChoice.equals(Object other){
        if(Program.sameClass(this, other)){
            ExternalChoice obj = (ExternalChoice) other;
            boolean foundAll = true;
            for (SessionReceive s1: getReceivess()){
              boolean found = false;
              for (SessionReceive s2 : obj.getReceivess()){
                found = found || s1.equals(s2);
              }
              foundAll = found && foundAll;
            }
            return foundAll;
        }
        return false;
    }

    public boolean RequestForwardDelegation.equals(Object other){
        if(Program.sameClass(this, other)){
            RequestForwardDelegation obj = (RequestForwardDelegation) other;
            return getDelegating().equals(obj.getDelegating()) &&
                               getNext().equals(obj.getNext());

        }
        return false;
    }

    public boolean RequestBackwardDelegation.equals(Object other){
        if(Program.sameClass(this, other)){
            RequestBackwardDelegation obj = (RequestBackwardDelegation) other;
            return getDelegating().equals(obj.getDelegating()) &&
                               getNext().equals(obj.getNext());

        }
        return false;
    }

    public boolean AcceptForwardDelegation.equals(Object other){
        if(Program.sameClass(this, other)){
            AcceptForwardDelegation obj = (AcceptForwardDelegation) other;
            return getDelegate().equals(obj.getDelegate()) &&
                               getNext().equals(obj.getNext());

        }
        return false;
    }

    public boolean AcceptBackwardDelegation.equals(Object other){
        if(Program.sameClass(this, other)){
            AcceptBackwardDelegation obj = (AcceptBackwardDelegation) other;
            return getDelegate().equals(obj.getDelegate()) &&
                               getNext().equals(obj.getNext());

        }
        return false;
    }


     public boolean Session.equals(Object other){
        return Program.sameClass(this,other);
    }

     public boolean LiteralType.equals(Object other){
        return Program.sameClass(this,other);
    }

     public boolean End.equals(Object other){
        return other instanceof LiteralType;
    }

}