aspect SessionComparison{

    public boolean FunType.compareWith(FunctionType type) {
        boolean name = this.getFunName().equals(type.getFunName());
        boolean arguments = Program.checkLists(getArgumentss(),type.getArgumentss());
        boolean sessions = getSessionType().compareWith(type.getSessionType());
        return name && arguments && sessions;
    }

    public boolean Session.compareWith(Session s){
        return false;
    }

    /*
    SessionSend:Session ::= Sender:Atom Label:Atom Type:LiteralType* Next:Session;
    SessionReceive:Session ::= Recipient:Atom Label:Atom Type:LiteralType* Next:Session;
    InternalChoice:Session ::= Sends:SessionSend*;
    ExternalChoice:Session ::= Receives:SessionReceive*;
    RequestForwardDelegation:Session ::= Delegating:Atom Next:Session;
    RequestBackwardDelegation:Session ::= Delegating:Atom Next:Session;
    AcceptForwardDelegation:Session ::= Delegate:Atom Next:Session;
    AcceptBackwardDelegation:Session ::= Delegate:Atom Next:Session;
    End:Session;

    abstract LiteralType:Session;
    AtomType:LiteralType;
    IntType:LiteralType;
    StringType:LiteralType;
    PidType:LiteralType;
    BoolType:LiteralType;
    ActorPid:LiteralType::=<Actor:String>;
    AtS:LiteralType::=<Partecipant:String>;

    */

}